[
  {
    "input": "event.fields.amount > 0",
    "expected": ["/event/fields/amount"]
  },
  {
    "input": "user.customFields.x = \"yes\"",
    "expected": ["/user/customFields/x"]
  },
  {
    "input": "user.referredByReferral.referredUser.customFields.y = false",
    "expected": ["/user/referredByReferral/referredUser/customFields/y"]
  },
  {
    "input": "Account.Order.Product.($var1 := Price ; $var2:=Quantity; $var1 * $var2)",
    "expected": [
      "/Account/Order/Product",
      "/Account/Order/Product/Price",
      "/Account/Order/Product/Quantity"
    ]
  },
  {
    "input": "Account.Order.Product.($var1 := $someVar1; $var2 := $someVar2; $var1 * $var2)",
    "expected": ["/Account/Order/Product"]
  },
  {
    "input": "*",
    "expected": []
  },
  {
    "input": "test.%",
    "expected": ["/test"]
  },
  {
    "input": "*.test",
    "expected": []
  },
  {
    "input": "Account[$$.Account.`Account Name` = \"Firefly\"].*[OrderID=\"order104\"].Product.Price",
    "expected": ["/Account", "/Account/Account Name"]
  },
  {
    "input": "Account[`Account Name`=\"order104\"].*[$$.Account.Order.OrderID=\"order104\" ].Product.Price",
    "expected": ["/Account", "/Account/Account Name", "/Account/Order/OrderID"]
  },
  {
    "input": "(\n      $field := \"x\";\n      $fieldValue = $lookup(event.fields, $field);\n      $fieldValue > 0\n   )",
    "expected": ["/event/fields"]
  },
  {
    "input": "(event.key = \"purchase\" ? (user.accountId = \"new\" and user.accountId = \"unique\" ?  $tier1))",
    "expected": ["/event/key", "/user/accountId", "/user/accountId"]
  },
  {
    "input": "Account.Order.Product {\n    `Product Name`: {\"Price\": Price, \"Qty\": Quantity}\n  }",
    "expected": [
      "/Account/Order/Product",
      "/Account/Order/Product/Product Name",
      "/Account/Order/Product/Price",
      "/Account/Order/Product/Quantity"
    ]
  },
  {
    "input": "$test.foo.bar",
    "expected": []
  },
  {
    "input": "($test := Something; $test.foo.bar)",
    "expected": ["/Something", "/Something/foo/bar"]
  },
  {
    "input": "$.foo.bar",
    "expected": ["/foo/bar"]
  },
  {
    "input": "Account.Order.Product^(>Price)",
    "expected": ["/Account/Order/Product", "/Account/Order/Product/Price"]
  },
  {
    "input": "Account.Order.Product^(>Price, <Quantity)",
    "expected": [
      "/Account/Order/Product",
      "/Account/Order/Product/Price",
      "/Account/Order/Product/Quantity"
    ]
  },
  {
    "input": "student[type='fulltime']^(DoB).name",
    "expected": ["/student/name", "/student/type", "/student/DoB"]
  },
  {
    "input": "$.[value,epochSeconds][]",
    "expected": ["/value", "/epochSeconds"]
  },
  {
    "input": "$.[value,epochSeconds]",
    "expected": ["/value", "/epochSeconds"]
  },
  {
    "input": "singleArray",
    "expected": ["/singleArray"]
  },
  {
    "input": "singleArray[]",
    "expected": ["/singleArray"]
  },
  {
    "input": "[]",
    "expected": []
  },
  {
    "input": "[1]",
    "expected": []
  },
  {
    "input": "[1, 2, [3, 4]]",
    "expected": []
  },
  {
    "input": "[1, \"two\", [\"three\", 4]]",
    "expected": []
  },
  {
    "input": "[1, $two, [\"three\", $four]]",
    "expected": []
  },
  {
    "input": "[\"foo.bar\", foo.bar, [\"foo.baz\", foo.blah.baz]]",
    "expected": ["/foo/bar", "/foo/blah/baz"]
  },
  {
    "input": "foo.blah.baz.[fud, fud]",
    "expected": ["/foo/blah/baz", "/foo/blah/baz/fud", "/foo/blah/baz/fud"]
  },
  {
    "input": "foo.blah.baz.[[fud, fud]]",
    "expected": ["/foo/blah/baz", "/foo/blah/baz/fud", "/foo/blah/baz/fud"]
  },
  {
    "input": "foo.blah.[baz].fud",
    "expected": ["/foo/blah/baz/fud"]
  },
  {
    "input": "foo.blah.[baz, buz].fud",
    "expected": ["/foo/blah/baz/fud", "/foo/blah/buz/fud"]
  },
  {
    "input": "[Address, Other.\"Alternative.Address\"].City",
    "expected": ["/Address/City", "/Other/Alternative.Address/City"]
  },
  {
    "input": "[Address, Other.`Alternative.Address`].City",
    "expected": ["/Address/City", "/Other/Alternative.Address/City"]
  },
  {
    "input": "()",
    "expected": []
  },
  {
    "input": "(  $func := function($arg) {$arg.Account.Order[0].OrderID};  $func($))",
    "expected": []
  },
  {
    "input": "(  $func := function($arg) {$arg.Account.Order[0]};  $func($).OrderID)",
    "expected": []
  },
  {
    "input": "and=1 and or=2",
    "expected": ["/and", "/or"]
  },
  {
    "input": "and>1 or or<=2",
    "expected": ["/and", "/or"]
  },
  {
    "input": "and>1 or or!=2",
    "expected": ["/and", "/or"]
  },
  {
    "input": "and and and",
    "expected": ["/and", "/and"]
  },
  {
    "input": "$[].content.origin.$lowercase(name)",
    "expected": ["/content/origin", "/content/origin/name"]
  },
  {
    "input": "true or foo",
    "expected": ["/foo"]
  },
  {
    "input": "foo or true",
    "expected": ["/foo"]
  },
  {
    "input": "false or foo",
    "expected": ["/foo"]
  },
  {
    "input": "foo or false",
    "expected": ["/foo"]
  },
  {
    "input": "foo or bar",
    "expected": ["/foo", "/bar"]
  },
  {
    "input": "$not(nothing)",
    "expected": ["/nothing"]
  },
  {
    "input": "foo = '' or $number(foo) = 0",
    "expected": ["/foo", "/foo"]
  },
  {
    "input": "$type(data) = 'number' and data > 10",
    "expected": ["/data", "/data"]
  },
  {
    "input": "$type(age) = 'number' or $number(age) > 0",
    "expected": ["/age", "/age"]
  },
  {
    "input": "Account.(  $AccName := function() { $.\"Account Name\" };  Order[OrderID = \"order104\"].Product{    \"Account\": $AccName(),    \"SKU-\" & $string(ProductID): $.\"Product Name\"  } )",
    "expected": [
      "/Account",
      "/Account/Account Name",
      "/Account/Order/Product",
      "/Account/Order/OrderID",
      "/Account/Order/Product/ProductID",
      "/Account/Order/Product/Product Name"
    ]
  },
  {
    "input": "Account.(  $AccName := function() { `Account Name` };  Order[OrderID = \"order104\"].Product{    \"Account\": $AccName(),    \"SKU-\" & $string(ProductID): `Product Name`  } )",
    "expected": [
      "/Account",
      "/Account/Account Name",
      "/Account/Order/Product",
      "/Account/Order/OrderID",
      "/Account/Order/Product/ProductID",
      "/Account/Order/Product/Product Name"
    ]
  },
  {
    "input": "\"3\"=3",
    "expected": []
  },
  {
    "input": "null <= \"world\"",
    "expected": []
  },
  {
    "input": "foo.bar > bar",
    "expected": ["/foo/bar", "/bar"]
  },
  {
    "input": "foo.bar >= bar",
    "expected": ["/foo/bar", "/bar"]
  },
  {
    "input": "foo.bar<bar",
    "expected": ["/foo/bar", "/bar"]
  },
  {
    "input": "foo.bar<=bar",
    "expected": ["/foo/bar", "/bar"]
  },
  {
    "input": "foo.blah.baz[fud = \"hello\"]",
    "expected": ["/foo/blah/baz", "/foo/blah/baz/fud"]
  },
  {
    "input": "Account.Order.Product[Price > 30].Price",
    "expected": ["/Account/Order/Product/Price", "/Account/Order/Product/Price"]
  },
  {
    "input": "Account.Order.Product.Price[$<=35]",
    "expected": ["/Account/Order/Product/Price"]
  },
  {
    "input": "data = [1, 2, 3, 4]",
    "expected": ["/data"]
  },
  {
    "input": "data[2] = 3",
    "expected": ["/data"]
  },
  {
    "input": "{ 'one': 1, 'two': 2 } = { 'two': 2, 'one': 1 }",
    "expected": []
  },
  {
    "input": "two = 2",
    "expected": ["/two"]
  },
  {
    "input": "one + one = two",
    "expected": ["/one", "/one", "/two"]
  },
  {
    "input": "null = null",
    "expected": []
  },
  {
    "input": "null = nothing",
    "expected": ["/nothing"]
  },
  {
    "input": "nothing = nothing",
    "expected": ["/nothing", "/nothing"]
  },
  {
    "input": "Account.Order[0].Product[0].Description = Account.Order[1].Product[0].Description",
    "expected": [
      "/Account/Order/Product/Description",
      "/Account/Order/Product/Description"
    ]
  },
  {
    "input": "Account.Order[0].Product[0] = Account.Order[1].Product[0]",
    "expected": ["/Account/Order/Product", "/Account/Order/Product"]
  },
  {
    "input": "[\"Red\"[$$=\"Bus\"], \"White\"[$$=\"Police Car\"]][0]",
    "expected": []
  },
  {
    "input": "$lookup({\"Bus\": \"Red\", \"Police Car\": \"White\"}, $$)",
    "expected": []
  },
  {
    "input": "Account.Order.Product.(Price < 30 ? \"Cheap\")",
    "expected": ["/Account/Order/Product", "/Account/Order/Product/Price"]
  },
  {
    "input": "Account.Order.Product.(Price < 30 ? \"Cheap\" : \"Expensive\")",
    "expected": ["/Account/Order/Product", "/Account/Order/Product/Price"]
  },
  {
    "input": "Account.Order.Product.(Price < 30 ? \"Cheap\" : Price < 100 ? \"Expensive\" : \"Rip off\")",
    "expected": [
      "/Account/Order/Product",
      "/Account/Order/Product/Price",
      "/Account/Order/Product/Price"
    ]
  },
  {
    "input": "$number()",
    "expected": []
  },
  {
    "input": "[1..5].$string()",
    "expected": []
  },
  {
    "input": "[1..5].(\"Item \" & $string())",
    "expected": []
  },
  {
    "input": "Account.Order.Product.\"Product Name\".$uppercase().$substringBefore(\" \")",
    "expected": ["/Account/Order/Product/Product Name"]
  },
  {
    "input": "foo.**.blah",
    "expected": ["/foo"]
  },
  {
    "input": "foo.**.baz",
    "expected": ["/foo"]
  },
  {
    "input": "foo.**.fud",
    "expected": ["/foo"]
  },
  {
    "input": "\"foo\".**.fud",
    "expected": ["/foo"]
  },
  {
    "input": "foo.**.\"fud\"",
    "expected": ["/foo"]
  },
  {
    "input": "\"foo\".**.\"fud\"",
    "expected": ["/foo"]
  },
  {
    "input": "foo.*.**.fud",
    "expected": ["/foo"]
  },
  {
    "input": "foo.**.*.fud",
    "expected": ["/foo"]
  },
  {
    "input": "Account.Order.**.Colour",
    "expected": ["/Account/Order"]
  },
  {
    "input": "foo.**.fud[0]",
    "expected": ["/foo"]
  },
  {
    "input": "(foo.**.fud)[0]",
    "expected": ["/foo"]
  },
  {
    "input": "(**.fud)[0]",
    "expected": []
  },
  {
    "input": "**.Price",
    "expected": []
  },
  {
    "input": "**.Price[0]",
    "expected": []
  },
  {
    "input": "(**.Price)[0]",
    "expected": []
  },
  {
    "input": "Account.Order.blah.**",
    "expected": ["/Account/Order/blah"]
  },
  {
    "input": "**",
    "expected": []
  },
  {
    "input": "$base64encode(\"hello:world\")",
    "expected": []
  },
  {
    "input": "$base64decode(\"aGVsbG86d29ybGQ=\")",
    "expected": []
  },
  {
    "input": "\"s\" - 1",
    "expected": []
  },
  {
    "input": "\"no closing quote",
    "expected": []
  },
  {
    "input": "`no closing backtick",
    "expected": []
  },
  {
    "input": "unknown(function)",
    "expected": []
  },
  {
    "input": "sum(Account.Order.OrderID)",
    "expected": []
  },
  {
    "input": "[1,2)",
    "expected": []
  },
  {
    "input": "[1:2]",
    "expected": []
  },
  {
    "input": "$replace(\"foo\", \"o, \"rr\")",
    "expected": []
  },
  {
    "input": "@ bar",
    "expected": []
  },
  {
    "input": "2(blah)",
    "expected": []
  },
  {
    "input": "2()",
    "expected": []
  },
  {
    "input": "3(?)",
    "expected": []
  },
  {
    "input": "1=",
    "expected": []
  },
  {
    "input": "function(x){$x}(3)",
    "expected": []
  },
  {
    "input": "x:=1",
    "expected": []
  },
  {
    "input": "2:=1",
    "expected": []
  },
  {
    "input": "$foo()",
    "expected": []
  },
  {
    "input": "55=>5",
    "expected": []
  },
  {
    "input": "Ssum(:)",
    "expected": []
  },
  {
    "input": "[1,2,3]{\"num\": $}[true]",
    "expected": []
  },
  {
    "input": "[1,2,3]{\"num\": $}{\"num\": $}",
    "expected": []
  },
  {
    "input": "Account.Order[0].Product;",
    "expected": []
  },
  {
    "input": "( $A := function(){$min(2, 3)}; $A() )",
    "expected": []
  },
  {
    "input": "( $B := function(){''}; $A := function(){2 + $B()}; $A() )",
    "expected": []
  },
  {
    "input": "foo.bar",
    "expected": []
  },
  {
    "input": "foo.blah",
    "expected": []
  },
  {
    "input": "foo.blah.bazz",
    "expected": []
  },
  {
    "input": "foo.blah.baz",
    "expected": []
  },
  {
    "input": "foo.blah.baz.fud",
    "expected": []
  },
  {
    "input": "Other.Misc",
    "expected": []
  },
  {
    "input": "bazz",
    "expected": []
  },
  {
    "input": "fud",
    "expected": []
  },
  {
    "input": "phone",
    "expected": []
  },
  {
    "input": "phone[0]",
    "expected": []
  },
  {
    "input": "phone[0][]",
    "expected": []
  },
  {
    "input": "phone[0].number",
    "expected": []
  },
  {
    "input": "(phone)[0].number",
    "expected": []
  },
  {
    "input": "$.phone[0].number",
    "expected": []
  },
  {
    "input": "{'Hello':'World'}",
    "expected": []
  },
  {
    "input": "$.{'Hello':'World'}",
    "expected": []
  },
  {
    "input": "Account.Order.[Product.Price]",
    "expected": []
  },
  {
    "input": "$.nest0",
    "expected": []
  },
  {
    "input": "nest0",
    "expected": []
  },
  {
    "input": "$[0]",
    "expected": []
  },
  {
    "input": "$[1]",
    "expected": []
  },
  {
    "input": "$[-1]",
    "expected": []
  },
  {
    "input": "$[0].nest0",
    "expected": []
  },
  {
    "input": "$[1].nest0",
    "expected": []
  },
  {
    "input": "$[0].nest0[0]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.[nest2.[nest3]]]",
    "expected": []
  },
  {
    "input": "nest0.nest1.[nest2.[nest3]]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.nest2.[nest3]]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.[nest2.nest3]]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.nest2.nest3]",
    "expected": []
  },
  {
    "input": "nest0.nest1.[nest2.nest3]",
    "expected": []
  },
  {
    "input": "nest0.nest1.nest2.[nest3]",
    "expected": []
  },
  {
    "input": "nest0.nest1.nest2.nest3",
    "expected": []
  },
  {
    "input": "nest0.[nest1.[nest2.[nest3]]]",
    "expected": []
  },
  {
    "input": "nest0.nest1.[nest2.[nest3]]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.nest2.[nest3]]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.[nest2.nest3]]",
    "expected": []
  },
  {
    "input": "nest0.[nest1.nest2.nest3]",
    "expected": []
  },
  {
    "input": "nest0.nest1.[nest2.nest3]",
    "expected": []
  },
  {
    "input": "nest0.nest1.nest2.[nest3]",
    "expected": []
  },
  {
    "input": "nest0.nest1.nest2.nest3",
    "expected": []
  },
  {
    "input": "{\"a\": 1 }.a",
    "expected": []
  },
  {
    "input": "a",
    "expected": []
  },
  {
    "input": "{\"a\": [1] }.a",
    "expected": []
  },
  {
    "input": "a",
    "expected": []
  },
  {
    "input": "{\"a\": [[1]] }.a",
    "expected": []
  },
  {
    "input": "a",
    "expected": []
  },
  {
    "input": "[{\"a\":[1,2]}, {\"a\":[3]}].a",
    "expected": []
  },
  {
    "input": "a",
    "expected": []
  },
  {
    "input": "[{\"a\":[{\"b\":[1]}, {\"b\":[2]}]}, {\"a\":[{\"b\":[3]}, {\"b\":[4]}]}].a[0].b",
    "expected": []
  },
  {
    "input": "a[0].b",
    "expected": []
  },
  {
    "input": "$.a[0].b",
    "expected": []
  },
  {
    "input": "a.b[0]",
    "expected": []
  },
  {
    "input": "Phone[type=\"mobile\"].number",
    "expected": []
  },
  {
    "input": "Phone[type=\"mobile\"][].number",
    "expected": []
  },
  {
    "input": "Phone[][type=\"mobile\"].number",
    "expected": []
  },
  {
    "input": "Phone[type=\"office\"][].number",
    "expected": []
  },
  {
    "input": "Phone{type: number}",
    "expected": []
  },
  {
    "input": "Phone{type: number[]}",
    "expected": []
  },
  {
    "input": "$[type='command'][]",
    "expected": []
  },
  {
    "input": "$[][type='command']",
    "expected": []
  },
  {
    "input": "$filter($, function($e) { $e != 0 })[]",
    "expected": []
  },
  {
    "input": "$.tags[title='example'][]",
    "expected": []
  },
  {
    "input": "( $data := { 'number': [1..2e5].$string() }; $values := $data.number; $count($values) )",
    "expected": []
  },
  {
    "input": "( $data := { 'number': [1..2e5].$string() }; $values := $lookup($data, 'number'); $count($values) )",
    "expected": []
  },
  {
    "input": "$.[value,epochSeconds]",
    "expected": []
  },
  {
    "input": "$.[value,epochSeconds]",
    "expected": []
  },
  {
    "input": "$.[value,epochSeconds][]",
    "expected": []
  },
  {
    "input": "$.[value,epochSeconds][]",
    "expected": []
  },
  {
    "input": "$abs(3.7)",
    "expected": []
  },
  {
    "input": "$abs(-3.7)",
    "expected": []
  },
  {
    "input": "$abs(0)",
    "expected": []
  },
  {
    "input": "$abs(nothing)",
    "expected": []
  },
  {
    "input": "$append([1,2], [3,4])",
    "expected": []
  },
  {
    "input": "$append(1, [3,4])",
    "expected": []
  },
  {
    "input": "$append(1,2)",
    "expected": []
  },
  {
    "input": "$append(1,notexist)",
    "expected": []
  },
  {
    "input": "$append(notexist, [2,3,4])",
    "expected": []
  },
  {
    "input": "($append($data.a, [2]); $data.a)",
    "expected": []
  },
  {
    "input": "Account.Order[0].OrderID ~> $uppercase()",
    "expected": []
  },
  {
    "input": "Account.Order[0].OrderID ~> $uppercase() ~> $lowercase()",
    "expected": []
  },
  {
    "input": "Account.Order.OrderID ~> $join()",
    "expected": []
  },
  {
    "input": "Account.Order.OrderID ~> $join(\", \")",
    "expected": []
  },
  {
    "input": "Account.Order.Product.(Price * Quantity) ~> $sum()",
    "expected": []
  },
  {
    "input": "( $uppertrim := $trim ~> $uppercase;  $uppertrim(\"   Hello    World   \") )",
    "expected": []
  },
  {
    "input": "\"john@example.com\" ~> $substringAfter(\"@\") ~> $substringBefore(\".\") ",
    "expected": []
  },
  {
    "input": "\"\" ~> $substringAfter(\"@\") ~> $substringBefore(\".\") ",
    "expected": []
  },
  {
    "input": "foo ~> $substringAfter(\"@\") ~> $substringBefore(\".\") ",
    "expected": []
  },
  {
    "input": "( $domain := $substringAfter(?,\"@\") ~> $substringBefore(?,\".\"); $domain(\"john@example.com\") )",
    "expected": []
  },
  {
    "input": "( $square := function($x){$x*$x}; [1..5] ~> $map($square) ) ",
    "expected": []
  },
  {
    "input": "( $square := function($x){$x*$x}; [1..5] ~> $map($square) ~> $sum() ) ",
    "expected": []
  },
  {
    "input": "($betweenBackets := $substringAfter(?, \"(\") ~> $substringBefore(?, \")\");$betweenBackets(\"test(foo)bar\")) ",
    "expected": []
  },
  {
    "input": "($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){$g($f($x))}};$instructions := [$sum, $square];$sumsq := $instructions ~> $reduce($chain);[1..5] ~> $sumsq()) ",
    "expected": []
  },
  {
    "input": "($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){ $x ~> $f ~> $g }};$instructions := [$sum, $square, $string];$sumsq := $instructions ~> $reduce($chain);[1..5] ~> $sumsq()) ",
    "expected": []
  },
  {
    "input": "($square := function($x){$x*$x};$instructions := $sum ~> $square;[1..5] ~> $instructions())  ",
    "expected": []
  },
  {
    "input": "($square := function($x){$x*$x};$sum_of_squares := $map(?, $square) ~> $sum;[1..5] ~> $sum_of_squares())  ",
    "expected": []
  },
  {
    "input": "($times := λ($x, $y) { $x * $y };$product := $reduce(?, $times);$square := function($x){$x*$x};$product_of_squares := $map(?, $square) ~> $product;[1..5] ~> $product_of_squares())",
    "expected": []
  },
  {
    "input": "($square := function($x){$x*$x};[1..5] ~> $map($square) ~> $reduce(λ($x, $y) { $x * $y });)",
    "expected": []
  },
  {
    "input": "($prices := Account.Order.Product.Price;$quantities := Account.Order.Product.Quantity;$product := λ($arr) { $arr[0] * $arr[1] };$zip($prices, $quantities) ~> $map($product) ~> $sum())",
    "expected": []
  },
  {
    "input": "42 ~> \"hello\"",
    "expected": []
  },
  {
    "input": "Account.Order.Product[$.\"Product Name\" ~> /hat/i].ProductID",
    "expected": []
  },
  {
    "input": "$assert(Account.Order[0].Product[0].Price < 34, 'Too Expensive')",
    "expected": []
  },
  {
    "input": "$assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive')",
    "expected": []
  },
  {
    "input": "($assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive'); Account.Order[0].Product[0].Price)",
    "expected": []
  },
  {
    "input": "($assert(Account.Order[0].Product[0].Price < 34, 'Too Expensive'); Account.Order[0].Product[0].Price)",
    "expected": []
  },
  {
    "input": "$assert(null)",
    "expected": []
  },
  {
    "input": "$assert(5)",
    "expected": []
  },
  {
    "input": "$assert(false)",
    "expected": []
  },
  {
    "input": "$assert(true)",
    "expected": []
  },
  {
    "input": "$average(Account.Order.Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.$average(Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.(OrderID & \": \" & $average(Product.(Price*Quantity)))",
    "expected": []
  },
  {
    "input": "$average([])",
    "expected": []
  },
  {
    "input": "$average([1,2,3])",
    "expected": []
  },
  {
    "input": "$average([\"1\",\"2\",\"3\"])",
    "expected": []
  },
  {
    "input": "$average([\"1\",\"2\",3])",
    "expected": []
  },
  {
    "input": "$average(1)",
    "expected": []
  },
  {
    "input": "$average([],[])",
    "expected": []
  },
  {
    "input": "$average([1,2,3],[])",
    "expected": []
  },
  {
    "input": "$average([],[],[])",
    "expected": []
  },
  {
    "input": "$average([1,2],[],[])",
    "expected": []
  },
  {
    "input": "$average(undefined)",
    "expected": []
  },
  {
    "input": "$boolean(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$boolean(\"\")",
    "expected": []
  },
  {
    "input": "$boolean(true)",
    "expected": []
  },
  {
    "input": "$boolean(false)",
    "expected": []
  },
  {
    "input": "$boolean(0)",
    "expected": []
  },
  {
    "input": "$boolean(10)",
    "expected": []
  },
  {
    "input": "$boolean(-0.5)",
    "expected": []
  },
  {
    "input": "$boolean(null)",
    "expected": []
  },
  {
    "input": "$boolean([])",
    "expected": []
  },
  {
    "input": "$boolean([0])",
    "expected": []
  },
  {
    "input": "$boolean([1])",
    "expected": []
  },
  {
    "input": "$boolean([1,2,3])",
    "expected": []
  },
  {
    "input": "$boolean([0,0])",
    "expected": []
  },
  {
    "input": "$boolean([[]])",
    "expected": []
  },
  {
    "input": "$boolean([[null]])",
    "expected": []
  },
  {
    "input": "$boolean([[[true]]])",
    "expected": []
  },
  {
    "input": "$boolean({})",
    "expected": []
  },
  {
    "input": "$boolean({\"hello\":\"world\"})",
    "expected": []
  },
  {
    "input": "$boolean(Account)",
    "expected": []
  },
  {
    "input": "$boolean(Account.Order.Product.Price)",
    "expected": []
  },
  {
    "input": "$boolean(Account.blah)",
    "expected": []
  },
  {
    "input": "$boolean($boolean)",
    "expected": []
  },
  {
    "input": "$boolean(function(){true})",
    "expected": []
  },
  {
    "input": "$boolean(2,3)",
    "expected": []
  },
  {
    "input": "$ceil(3.7)",
    "expected": []
  },
  {
    "input": "$ceil(-3.7)",
    "expected": []
  },
  {
    "input": "$ceil(0)",
    "expected": []
  },
  {
    "input": "$ceil(nothing)",
    "expected": []
  },
  {
    "input": "$contains(\"Hello World\", \"lo\")",
    "expected": []
  },
  {
    "input": "$contains(\"Hello World\", \"World\")",
    "expected": []
  },
  {
    "input": "$contains(\"Hello World\", \"world\")",
    "expected": []
  },
  {
    "input": "$contains(\"Hello World\", \"Word\")",
    "expected": []
  },
  {
    "input": "$contains(nothing, \"World\")",
    "expected": []
  },
  {
    "input": "$contains(23, 3)",
    "expected": []
  },
  {
    "input": "$contains(\"23\", 3)",
    "expected": []
  },
  {
    "input": "$count(Account.Order.Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.$count(Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.(OrderID & \": \" & $count(Product.(Price*Quantity)))",
    "expected": []
  },
  {
    "input": "$count([])",
    "expected": []
  },
  {
    "input": "$count([1,2,3])",
    "expected": []
  },
  {
    "input": "$count([\"1\",\"2\",\"3\"])",
    "expected": []
  },
  {
    "input": "$count([\"1\",\"2\",3])",
    "expected": []
  },
  {
    "input": "$count(1)",
    "expected": []
  },
  {
    "input": "$count([],[])",
    "expected": []
  },
  {
    "input": "$count([1,2,3],[])",
    "expected": []
  },
  {
    "input": "$count([],[],[])",
    "expected": []
  },
  {
    "input": "$count([1,2],[],[])",
    "expected": []
  },
  {
    "input": "$count(undefined)",
    "expected": []
  },
  {
    "input": "$count([1,2,3,4]) / 2",
    "expected": []
  },
  {
    "input": "$decodeUrl(\"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\")",
    "expected": []
  },
  {
    "input": "$decodeUrl(blah)",
    "expected": []
  },
  {
    "input": "$decodeUrl('%E0%A4%A')",
    "expected": []
  },
  {
    "input": "$decodeUrlComponent(\"%3Fx%3Dtest\")",
    "expected": []
  },
  {
    "input": "$decodeUrlComponent(blah)",
    "expected": []
  },
  {
    "input": "$decodeUrlComponent('%E0%A4%A')",
    "expected": []
  },
  {
    "input": "$distinct([1,2,3,4])",
    "expected": []
  },
  {
    "input": "$distinct([1])",
    "expected": []
  },
  {
    "input": "$distinct(nothing)",
    "expected": []
  },
  {
    "input": "$distinct(null)",
    "expected": []
  },
  {
    "input": "$distinct('hello')",
    "expected": []
  },
  {
    "input": "$distinct(Account.Order.Product.SKU)",
    "expected": []
  },
  {
    "input": "$distinct(Account.Order.Product.`Product Name`)",
    "expected": []
  },
  {
    "input": "$distinct(Account.Order.Product.Description)",
    "expected": []
  },
  {
    "input": "$each(Address, λ($v, $k) {$k & \": \" & $v})",
    "expected": []
  },
  {
    "input": "$each({'a': 'hello', 'b': 'world'}, $uppercase)",
    "expected": []
  },
  {
    "input": "$each(function($v, $k) {$k[$v>2]})",
    "expected": []
  },
  {
    "input": "$encodeUrl(\"https://mozilla.org/?x=шеллы\")",
    "expected": []
  },
  {
    "input": "$encodeUrl(blah)",
    "expected": []
  },
  {
    "input": "$encodeUrl('\ud800')",
    "expected": []
  },
  {
    "input": "$encodeUrlComponent(\"?x=test\")",
    "expected": []
  },
  {
    "input": "$encodeUrlComponent(blah)",
    "expected": []
  },
  {
    "input": "$encodeUrlComponent('\ud800')",
    "expected": []
  },
  {
    "input": "Account.Order[0].Product[0].Price > 35 ? Account.Order[0].Product[0].Price : $error('Too Expensive')",
    "expected": []
  },
  {
    "input": "Account.Order[0].Product[0].Price > 34 ? Account.Order[0].Product[0].Price : $error('Too Expensive')",
    "expected": []
  },
  {
    "input": "Account.Order[0].Product[0].Price > 35 ? $error('Too Expensive') : Account.Order[0].Product[0].Price",
    "expected": []
  },
  {
    "input": "Account.Order[0].Product[0].Price > 34 ? $error('Too Expensive') : Account.Order[0].Product[0].Price",
    "expected": []
  },
  {
    "input": "$count(Account.Order[0].Product) < 2 ? $error('Not enough products in orders')",
    "expected": []
  },
  {
    "input": "$count(Account.Order[0].Product) < 3 ? $error('Not enough products in orders')",
    "expected": []
  },
  {
    "input": "($msg:='My Message'; $error($msg); true)",
    "expected": []
  },
  {
    "input": "$error(null)",
    "expected": []
  },
  {
    "input": "$error(5)",
    "expected": []
  },
  {
    "input": "$error()",
    "expected": []
  },
  {
    "input": "$error(foo)",
    "expected": []
  },
  {
    "input": "$eval('[1,2,3]')",
    "expected": []
  },
  {
    "input": "$eval(nothing)",
    "expected": []
  },
  {
    "input": "$eval('[1,$string(2),3]')",
    "expected": []
  },
  {
    "input": "$eval('Account.Order.Product.Quantity ~> $sum()')",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{'Name': `Product Name`, 'Total': $eval('Price * Quantity')}",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{'Name': `Product Name`, 'Volume': $eval('Width*Height*Depth', Description)}",
    "expected": []
  },
  {
    "input": "$eval('[1,string(2),3]')",
    "expected": []
  },
  {
    "input": "$eval('[1,#string(2),3]')",
    "expected": []
  },
  {
    "input": "$eval(\"{ 'test': 1 }\", [])",
    "expected": []
  },
  {
    "input": "$eval(\"{ 'test': 1 }\")",
    "expected": []
  },
  {
    "input": "$eval(\"{ 'test': 1 }\", [1,2,3])",
    "expected": []
  },
  {
    "input": "$eval(\"{ 'test': 1 }\")",
    "expected": []
  },
  {
    "input": "$exists(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$exists(\"\")",
    "expected": []
  },
  {
    "input": "$exists(true)",
    "expected": []
  },
  {
    "input": "$exists(false)",
    "expected": []
  },
  {
    "input": "$exists(0)",
    "expected": []
  },
  {
    "input": "$exists(-0.5)",
    "expected": []
  },
  {
    "input": "$exists(null)",
    "expected": []
  },
  {
    "input": "$exists([])",
    "expected": []
  },
  {
    "input": "$exists([0])",
    "expected": []
  },
  {
    "input": "$exists([1,2,3])",
    "expected": []
  },
  {
    "input": "$exists([[]])",
    "expected": []
  },
  {
    "input": "$exists([[null]])",
    "expected": []
  },
  {
    "input": "$exists([[[true]]])",
    "expected": []
  },
  {
    "input": "$exists({})",
    "expected": []
  },
  {
    "input": "$exists({\"hello\":\"world\"})",
    "expected": []
  },
  {
    "input": "$exists(Account)",
    "expected": []
  },
  {
    "input": "$exists(Account.Order.Product.Price)",
    "expected": []
  },
  {
    "input": "$exists($exists)",
    "expected": []
  },
  {
    "input": "$exists(function(){true})",
    "expected": []
  },
  {
    "input": "$exists(blah)",
    "expected": []
  },
  {
    "input": "$exists(Account.blah)",
    "expected": []
  },
  {
    "input": "$exists(Account.Order[2])",
    "expected": []
  },
  {
    "input": "$exists(Account.Order[0].blah)",
    "expected": []
  },
  {
    "input": "$exists(2,3)",
    "expected": []
  },
  {
    "input": "$exists()",
    "expected": []
  },
  {
    "input": "$floor(3.7)",
    "expected": []
  },
  {
    "input": "$floor(-3.7)",
    "expected": []
  },
  {
    "input": "$floor(0)",
    "expected": []
  },
  {
    "input": "$floor(nothing)",
    "expected": []
  },
  {
    "input": "$formatBase(100)",
    "expected": []
  },
  {
    "input": "$formatBase(nothing)",
    "expected": []
  },
  {
    "input": "$formatBase(100, 2)",
    "expected": []
  },
  {
    "input": "$formatBase(-100, 2)",
    "expected": []
  },
  {
    "input": "$formatBase(100, 36)",
    "expected": []
  },
  {
    "input": "$formatBase(99.5, 2.5)",
    "expected": []
  },
  {
    "input": "$formatBase(100, 1)",
    "expected": []
  },
  {
    "input": "$formatBase(100, 37)",
    "expected": []
  },
  {
    "input": "$formatInteger(undefined, '0')",
    "expected": []
  },
  {
    "input": "$formatInteger(123, '000')",
    "expected": []
  },
  {
    "input": "$formatInteger(123, '0000')",
    "expected": []
  },
  {
    "input": "$formatInteger(-3, '0000')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234, '0;c')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234, '###0')",
    "expected": []
  },
  {
    "input": "$formatInteger(12, '###0')",
    "expected": []
  },
  {
    "input": "$formatInteger(12.6, '###0')",
    "expected": []
  },
  {
    "input": "$formatInteger(123, '000;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(1, '0;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(28, '#0;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234, '###0;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(12, '###0;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(12340, '###١')",
    "expected": []
  },
  {
    "input": "$formatInteger(12340, '###０')",
    "expected": []
  },
  {
    "input": "$formatInteger(12340, '##0０')",
    "expected": []
  },
  {
    "input": "$formatInteger(12, '#,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(1200, '#,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(120000, '#,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(12345678, '#,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234567890, '#,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234567890, '#,###,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234567890, '#:###,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234567890, '##,##,##0')",
    "expected": []
  },
  {
    "input": "$formatInteger(0, 'I')",
    "expected": []
  },
  {
    "input": "$formatInteger(1984, 'I')",
    "expected": []
  },
  {
    "input": "$formatInteger(99, 'i')",
    "expected": []
  },
  {
    "input": "$formatInteger(12, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(20, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(34, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(99, 'W')",
    "expected": []
  },
  {
    "input": "$formatInteger(100, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(555, 'W')",
    "expected": []
  },
  {
    "input": "$formatInteger(555, 'Ww')",
    "expected": []
  },
  {
    "input": "$formatInteger(919, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(730, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(1000, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(3730, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(327730, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(4327730, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(1000000000001, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234567890123, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(1000000000000000, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(1e+46, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(1234567890123456, 'w')",
    "expected": []
  },
  {
    "input": "$formatInteger(12, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(20, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(34, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(99, 'W;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(100, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(555, 'W;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(919, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(730, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(1000, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(3731, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(327713, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(4327732, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(1000000000001, 'w;o')",
    "expected": []
  },
  {
    "input": "$formatInteger(1, 'A')",
    "expected": []
  },
  {
    "input": "$formatInteger(12, 'a')",
    "expected": []
  },
  {
    "input": "$formatInteger(26, 'a')",
    "expected": []
  },
  {
    "input": "$formatInteger(27, 'a')",
    "expected": []
  },
  {
    "input": "$formatInteger(300, 'A')",
    "expected": []
  },
  {
    "input": "$formatInteger(123456, 'A')",
    "expected": []
  },
  {
    "input": "$formatInteger(123456, 'α')",
    "expected": []
  },
  {
    "input": "$formatNumber(12345.6, \"#,###.00\")",
    "expected": []
  },
  {
    "input": "$formatNumber(12345678.9, \"9,999.99\")",
    "expected": []
  },
  {
    "input": "$formatNumber(123412345678.9, \"9,9,99.99\")",
    "expected": []
  },
  {
    "input": "$formatNumber(1234.56789, \"9,999.999,999\")",
    "expected": []
  },
  {
    "input": "$formatNumber(123.9, \"9999\")",
    "expected": []
  },
  {
    "input": "$formatNumber(0.14, \"01%\")",
    "expected": []
  },
  {
    "input": "$formatNumber(0.4857,\"###.###‰\")",
    "expected": []
  },
  {
    "input": "$formatNumber(0.14, \"###pm\", {\"per-mille\": \"pm\"})",
    "expected": []
  },
  {
    "input": "$formatNumber(-6, \"000\")",
    "expected": []
  },
  {
    "input": "$formatNumber(1234.5678, \"00.000e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(1234.5678, \"00.000e000\")",
    "expected": []
  },
  {
    "input": "$formatNumber(1234.5678, \"①①.①①①e①\", {\"zero-digit\": \"⑟\"})",
    "expected": []
  },
  {
    "input": "$formatNumber(0.234, \"0.0e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(0.234, \"#.00e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(0.123, \"#.e9\")",
    "expected": []
  },
  {
    "input": "$formatNumber(0.234, \".00e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(2392.14*(-36.58), \"000,000.000###;###,###.000###\")",
    "expected": []
  },
  {
    "input": "$formatNumber(2.14*86.58,\"PREFIX##00.000###SUFFIX\")",
    "expected": []
  },
  {
    "input": "$formatNumber(1E20,\"#,######\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#;#;#\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#.0.0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#0%%\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#0‰‰\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#0%‰\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\".e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"0+.e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"0,.e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"0,\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"0,,0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"0#.e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#0.#0e0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#0.0e0%\")",
    "expected": []
  },
  {
    "input": "$formatNumber(20,\"#0.0e0,0\")",
    "expected": []
  },
  {
    "input": "$formatNumber(2, '000.000')",
    "expected": []
  },
  {
    "input": "$formatNumber(2, 'AAA.AAA', {'zero-digit': 'A'})",
    "expected": []
  },
  {
    "input": "$formatNumber(0.1, 'AeAAA', {'zero-digit': 'A'})",
    "expected": []
  },
  {
    "input": "$formatNumber(foo, '#0.00')",
    "expected": []
  },
  {
    "input": "$fromMillis(1)",
    "expected": []
  },
  {
    "input": "$fromMillis(1509380732935)",
    "expected": []
  },
  {
    "input": "$fromMillis(foo)",
    "expected": []
  },
  {
    "input": "$fromMillis(undefined, 'undefined')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, 'Hello')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, 'Year: [Y0001]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, 'Year: <[Y0001]>')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, 'Year: <[Y9,999,*]>')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[[Year: <[Y0001]>')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, 'Year]]: <[Y0001]>')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[[Year]]: [[[Y0001]]]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D#1]/[M#1]/[Y0001]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1522616700000, '[F0] [FNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1522703100000, '[F0] [FNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Y0001]-[M01]-[D01]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Y]-[ M01]-[D 01]T[H01 ]:[ m   ]:[s].[f0  01][Z01:\n 01t]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0100')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01t]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '-0500')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '-0500')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '+1000')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+1000')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+0530')",
    "expected": []
  },
  {
    "input": "$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][z]', '-0500')",
    "expected": []
  },
  {
    "input": "$fromMillis(1204405500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')",
    "expected": []
  },
  {
    "input": "$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')",
    "expected": []
  },
  {
    "input": "$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z010101t]', '+0530')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y,2]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y##01,2-2]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2-2]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D1] [M01] [YI]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Da] [MA] [Yi]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D1o] [M01] [Y]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Yw]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[Dwo] [M01] [Y]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D1o] [MNn] [Y]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[D1o] [MN] [Y]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[FNn], [D1o] [MNn] [Y]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[FNn], the [Dwo] of [MNn] [Y] [E]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[FNn,3-3], [D1o] [MNn,3-3] [Y] [C]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1521801216617, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1204405500000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1199664000000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1514808000000, '[dwo] day of the year')",
    "expected": []
  },
  {
    "input": "$fromMillis(1546257600000, '[d] days in [Y0001]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1483185600000, '[d] days in [Y0001]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1514808000000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1515326400000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1545739200000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1388577600000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1419854400000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1419768000000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1419336000000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1420113600000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1420459200000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1451304000000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1451563200000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1451736000000, 'Week: [W]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1359460800000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1359633600000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1359720000000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1514808000000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1483272000000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1533038400000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1419940800000, 'Week: [w] of [xNn]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-10-21T13:05:00Z').[$fromMillis(), $fromMillis($, (),'-0500'), $fromMillis($, (),'0000')] ",
    "expected": []
  },
  {
    "input": "$fromMillis(1419940800000, '[YN]-[M]-[D]')",
    "expected": []
  },
  {
    "input": "$fromMillis(1419940800000, '[YN]-[M')",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2005-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2005-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2005-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2006-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2006-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2006-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2007-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2007-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2007-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2008-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2008-12-28', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2008-12-29', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2008-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2008-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2009-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2009-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2010-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2010-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "($ts := $toMillis('2010-01-03', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    "expected": []
  },
  {
    "input": "$join(\"hello\")",
    "expected": []
  },
  {
    "input": "$join([\"hello\"])",
    "expected": []
  },
  {
    "input": "$join([\"hello\", \"world\"])",
    "expected": []
  },
  {
    "input": "$join([\"hello\", \"world\"], \", \")",
    "expected": []
  },
  {
    "input": "$join([], \", \")",
    "expected": []
  },
  {
    "input": "$join(Account.Order.Product.Description.Colour, \", \")",
    "expected": []
  },
  {
    "input": "$join(Account.Order.Product.Description.Colour, no.sep)",
    "expected": []
  },
  {
    "input": "$join(Account.blah.Product.Description.Colour, \", \")",
    "expected": []
  },
  {
    "input": "$join(true, \", \")",
    "expected": []
  },
  {
    "input": "$join([1,2,3], \", \")",
    "expected": []
  },
  {
    "input": "$join([\"hello\"], 3)",
    "expected": []
  },
  {
    "input": "$join()",
    "expected": []
  },
  {
    "input": "$keys(Account)",
    "expected": []
  },
  {
    "input": "$keys(Account.Order.Product)",
    "expected": []
  },
  {
    "input": "$keys({})",
    "expected": []
  },
  {
    "input": "$keys({\"foo\":{}})",
    "expected": []
  },
  {
    "input": "$keys(\"foo\")",
    "expected": []
  },
  {
    "input": "$keys(function(){1})",
    "expected": []
  },
  {
    "input": "$keys([\"foo\", \"bar\"])",
    "expected": []
  },
  {
    "input": "$length(\"\")",
    "expected": []
  },
  {
    "input": "$length(\"hello\")",
    "expected": []
  },
  {
    "input": "$length(missing)",
    "expected": []
  },
  {
    "input": "$length(\"\\u03BB-calculus\")",
    "expected": []
  },
  {
    "input": "$length(\"\\uD834\\uDD1E\")",
    "expected": []
  },
  {
    "input": "$length(\"𝄞\")",
    "expected": []
  },
  {
    "input": "$length(\"超明體繁\")",
    "expected": []
  },
  {
    "input": "$length(\"\\t\")",
    "expected": []
  },
  {
    "input": "$length(\"\\n\")",
    "expected": []
  },
  {
    "input": "$length(1234)",
    "expected": []
  },
  {
    "input": "$length(null)",
    "expected": []
  },
  {
    "input": "$length(true)",
    "expected": []
  },
  {
    "input": "$length([\"str\"])",
    "expected": []
  },
  {
    "input": "$length()",
    "expected": []
  },
  {
    "input": "$length()",
    "expected": []
  },
  {
    "input": "$length(\"Hello\", \"World\")",
    "expected": []
  },
  {
    "input": "$length(\"𝄞💩\")",
    "expected": []
  },
  {
    "input": "$lookup(Account, \"Account Name\")",
    "expected": []
  },
  {
    "input": "$lookup(Account.Order.Product, \"Product Name\")",
    "expected": []
  },
  {
    "input": "$lookup(Account.Order.Product.ProductID, \"Product Name\")",
    "expected": []
  },
  {
    "input": "$lookup($$, \"gust\")",
    "expected": []
  },
  {
    "input": "$lowercase(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$lowercase(blah)",
    "expected": []
  },
  {
    "input": "$max(Account.Order.Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.$max(Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.(OrderID & \": \" & $count(Product.(Price*Quantity)))",
    "expected": []
  },
  {
    "input": "$max([])",
    "expected": []
  },
  {
    "input": "$max([1,2,3])",
    "expected": []
  },
  {
    "input": "$max([\"1\",\"2\",\"3\"])",
    "expected": []
  },
  {
    "input": "$max([\"1\",\"2\",3])",
    "expected": []
  },
  {
    "input": "$max(1)",
    "expected": []
  },
  {
    "input": "$max([-1,-5])",
    "expected": []
  },
  {
    "input": "$max([],[])",
    "expected": []
  },
  {
    "input": "$max([1,2,3],[])",
    "expected": []
  },
  {
    "input": "$max([],[],[])",
    "expected": []
  },
  {
    "input": "$max([1,2],[],[])",
    "expected": []
  },
  {
    "input": "$max(undefined)",
    "expected": []
  },
  {
    "input": "$min(Account.Order.Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.$min(Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.(OrderID & \": \" & $min(Product.(Price*Quantity)))",
    "expected": []
  },
  {
    "input": "$min([])",
    "expected": []
  },
  {
    "input": "$min([1,2,3])",
    "expected": []
  },
  {
    "input": "$min([\"1\",\"2\",\"3\"])",
    "expected": []
  },
  {
    "input": "$min([\"1\",\"2\",3])",
    "expected": []
  },
  {
    "input": "$min(1)",
    "expected": []
  },
  {
    "input": "$min([],[])",
    "expected": []
  },
  {
    "input": "$min([1,2,3],[])",
    "expected": []
  },
  {
    "input": "$min([],[],[])",
    "expected": []
  },
  {
    "input": "$min([1,2],[],[])",
    "expected": []
  },
  {
    "input": "$min(undefined)",
    "expected": []
  },
  {
    "input": "$merge(nothing)",
    "expected": []
  },
  {
    "input": "$merge({\"a\":1})",
    "expected": []
  },
  {
    "input": "$merge([{\"a\":1}, {\"b\":2}])",
    "expected": []
  },
  {
    "input": "$merge([{\"a\": 1}, {\"b\": 2, \"c\": 3}])",
    "expected": []
  },
  {
    "input": "$merge([{\"a\": 1}, {\"b\": 2, \"a\": 3}])",
    "expected": []
  },
  {
    "input": "$number(0)",
    "expected": []
  },
  {
    "input": "$number(10)",
    "expected": []
  },
  {
    "input": "$number(-0.05)",
    "expected": []
  },
  {
    "input": "$number(\"0\")",
    "expected": []
  },
  {
    "input": "$number(\"-0.05\")",
    "expected": []
  },
  {
    "input": "$number(\"1e2\")",
    "expected": []
  },
  {
    "input": "$number(\"1.0e-2\")",
    "expected": []
  },
  {
    "input": "$number(\"1e0\")",
    "expected": []
  },
  {
    "input": "$number(\"10e500\")",
    "expected": []
  },
  {
    "input": "$number(\"Hello world\")",
    "expected": []
  },
  {
    "input": "$number(\"1/2\")",
    "expected": []
  },
  {
    "input": "$number(\"1234 hello\")",
    "expected": []
  },
  {
    "input": "$number(\"\")",
    "expected": []
  },
  {
    "input": "$number(true)",
    "expected": []
  },
  {
    "input": "$number(false)",
    "expected": []
  },
  {
    "input": "$number(Account.blah)",
    "expected": []
  },
  {
    "input": "$number(null)",
    "expected": []
  },
  {
    "input": "$number([])",
    "expected": []
  },
  {
    "input": "$number(\"[1]\")",
    "expected": []
  },
  {
    "input": "$number([1,2])",
    "expected": []
  },
  {
    "input": "$number([\"hello\"])",
    "expected": []
  },
  {
    "input": "$number([\"2\"])",
    "expected": []
  },
  {
    "input": "$number({})",
    "expected": []
  },
  {
    "input": "$number({\"hello\":\"world\"})",
    "expected": []
  },
  {
    "input": "$number($number)",
    "expected": []
  },
  {
    "input": "$number(function(){5})",
    "expected": []
  },
  {
    "input": "$number(1,2)",
    "expected": []
  },
  {
    "input": "$number('00')",
    "expected": []
  },
  {
    "input": "$number('0123')",
    "expected": []
  },
  {
    "input": "$number('-007')",
    "expected": []
  },
  {
    "input": "$number('000.00123000')",
    "expected": []
  },
  {
    "input": "$number('0x12')",
    "expected": []
  },
  {
    "input": "$number('0B101')",
    "expected": []
  },
  {
    "input": "$number('0O12')",
    "expected": []
  },
  {
    "input": "$pad(\"foo\", 5)",
    "expected": []
  },
  {
    "input": "$pad(\"foo\", -5)",
    "expected": []
  },
  {
    "input": "$pad(\"foo\", -5, \"#\")",
    "expected": []
  },
  {
    "input": "$pad(\"foo\", 5, \"\")",
    "expected": []
  },
  {
    "input": "$pad(\"foo\", 1)",
    "expected": []
  },
  {
    "input": "$pad(\"foo\", 8, \"-+\")",
    "expected": []
  },
  {
    "input": "$pad(nothing, 1)",
    "expected": []
  },
  {
    "input": "$pad('a𝄞💩', 7)",
    "expected": []
  },
  {
    "input": "$pad('𝄞💩', -7)",
    "expected": []
  },
  {
    "input": "$pad('a𝄞💩', 7, '💩')",
    "expected": []
  },
  {
    "input": "$pad('a𝄞💩', 6, '💩')",
    "expected": []
  },
  {
    "input": "$parseInteger(undefined, '0')",
    "expected": []
  },
  {
    "input": "$parseInteger('123', '000')",
    "expected": []
  },
  {
    "input": "$parseInteger('0123', '0000')",
    "expected": []
  },
  {
    "input": "$parseInteger('1234', '0')",
    "expected": []
  },
  {
    "input": "$parseInteger('1234', '###0')",
    "expected": []
  },
  {
    "input": "$parseInteger('12', '###0')",
    "expected": []
  },
  {
    "input": "$parseInteger('123rd', '000;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('1st', '0;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('28th', '#0;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('1234th', '###0;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('12th', '###0;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('١٢٣٤٠', '###١')",
    "expected": []
  },
  {
    "input": "$parseInteger('１２３４０', '###０')",
    "expected": []
  },
  {
    "input": "$parseInteger('12', '#,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('1,200', '#,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('12,345,678', '#,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('1,234,567,890', '#,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('1,234,567,890', '#,###,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('1234:567,890', '#:###,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('12345,67,890', '##,##,##0')",
    "expected": []
  },
  {
    "input": "$parseInteger('', 'I')",
    "expected": []
  },
  {
    "input": "$parseInteger('MCMLXXXIV', 'I')",
    "expected": []
  },
  {
    "input": "$parseInteger('xcix', 'i')",
    "expected": []
  },
  {
    "input": "$parseInteger('twelve', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('twenty', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('thirty-four', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('NINETY-NINE', 'W')",
    "expected": []
  },
  {
    "input": "$parseInteger('one hundred', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('FIVE HUNDRED AND FIFTY-FIVE', 'W')",
    "expected": []
  },
  {
    "input": "$parseInteger('Five Hundred and Fifty-Five', 'Ww')",
    "expected": []
  },
  {
    "input": "$parseInteger('nine hundred and nineteen', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('seven hundred and thirty', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('one thousand', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('three thousand, seven hundred and thirty', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirty', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('one trillion and one', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('one thousand trillion', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('ten billion trillion trillion trillion', 'w')",
    "expected": []
  },
  {
    "input": "$parseInteger('twelfth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('twentieth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('thirty-fourth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('NINETY-NINTH', 'W;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('one hundredth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('FIVE HUNDRED AND FIFTY-FIFTH', 'W;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('nine hundred and nineteenth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('seven hundred and thirtieth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('Seven Hundred and Thirty-Third', 'Ww;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('one thousandth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('three thousand, seven hundred and thirty-first', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirteenth', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty-second', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('one trillion and first', 'w;o')",
    "expected": []
  },
  {
    "input": "$parseInteger('A', 'A')",
    "expected": []
  },
  {
    "input": "$parseInteger('l', 'a')",
    "expected": []
  },
  {
    "input": "$parseInteger('z', 'a')",
    "expected": []
  },
  {
    "input": "$parseInteger('aa', 'a')",
    "expected": []
  },
  {
    "input": "$parseInteger('KN', 'A')",
    "expected": []
  },
  {
    "input": "$parseInteger('FZPH', 'A')",
    "expected": []
  },
  {
    "input": "$parseInteger('50', '#')",
    "expected": []
  },
  {
    "input": "$power(4, 2)",
    "expected": []
  },
  {
    "input": "$power(4, 0.5)",
    "expected": []
  },
  {
    "input": "$power(10, -2)",
    "expected": []
  },
  {
    "input": "$power(-2, 3)",
    "expected": []
  },
  {
    "input": "$power(nothing, 3)",
    "expected": []
  },
  {
    "input": "$power(-2, 1/3)",
    "expected": []
  },
  {
    "input": "$power(100, 1000)",
    "expected": []
  },
  {
    "input": "$replace(\"Hello World\", \"World\", \"Everyone\")",
    "expected": []
  },
  {
    "input": "$replace(\"the cat sat on the mat\", \"at\", \"it\")",
    "expected": []
  },
  {
    "input": "$replace(\"the cat sat on the mat\", \"at\", \"it\", 0)",
    "expected": []
  },
  {
    "input": "$replace(\"the cat sat on the mat\", \"at\", \"it\", 2)",
    "expected": []
  },
  {
    "input": "$replace(nothing, \"at\", \"it\", 2)",
    "expected": []
  },
  {
    "input": "$replace(\"hello\")",
    "expected": []
  },
  {
    "input": "$replace(\"hello\", \"l\", \"1\", null)",
    "expected": []
  },
  {
    "input": "$replace(\"hello\", \"l\", \"1\", -2)",
    "expected": []
  },
  {
    "input": "$replace(\"hello\", 1)",
    "expected": []
  },
  {
    "input": "$replace(\"hello\", \"\", \"bye\")",
    "expected": []
  },
  {
    "input": "$replace(\"hello\", 2, 1)",
    "expected": []
  },
  {
    "input": "$replace(123, 2, 1)",
    "expected": []
  },
  {
    "input": "$reverse([1..5])",
    "expected": []
  },
  {
    "input": "[[$], [$reverse($)], [$]]",
    "expected": []
  },
  {
    "input": "$reverse(nothing)",
    "expected": []
  },
  {
    "input": "$reverse([1])",
    "expected": []
  },
  {
    "input": "$round(4)",
    "expected": []
  },
  {
    "input": "$round(2.3)",
    "expected": []
  },
  {
    "input": "$round(2.7)",
    "expected": []
  },
  {
    "input": "$round(2.5)",
    "expected": []
  },
  {
    "input": "$round(3.5)",
    "expected": []
  },
  {
    "input": "$round(-0.5)",
    "expected": []
  },
  {
    "input": "$round(-0.3)",
    "expected": []
  },
  {
    "input": "$round(0.5)",
    "expected": []
  },
  {
    "input": "$round(-7.5)",
    "expected": []
  },
  {
    "input": "$round(-8.5)",
    "expected": []
  },
  {
    "input": "$round(4.49, 1)",
    "expected": []
  },
  {
    "input": "$round(4.525, 2)",
    "expected": []
  },
  {
    "input": "$round(4.515, 2)",
    "expected": []
  },
  {
    "input": "$round(12345, -2)",
    "expected": []
  },
  {
    "input": "$round(12450, -2)",
    "expected": []
  },
  {
    "input": "$round(12350, -2)",
    "expected": []
  },
  {
    "input": "$round(6.022e-23, 24)",
    "expected": []
  },
  {
    "input": "$round(unknown)",
    "expected": []
  },
  {
    "input": "$count($shuffle([1..10]))",
    "expected": []
  },
  {
    "input": "$sort($shuffle([1..10]))",
    "expected": []
  },
  {
    "input": "$shuffle(nothing)",
    "expected": []
  },
  {
    "input": "$shuffle([1])",
    "expected": []
  },
  {
    "input": "$sift(λ($v){$v.**.Postcode})",
    "expected": []
  },
  {
    "input": "**[*].$sift(λ($v){$v.Postcode})",
    "expected": []
  },
  {
    "input": "$sift(λ($v, $k){$k ~> /^A/})",
    "expected": []
  },
  {
    "input": "$sift({'a': 1, 'b': 0}, $boolean)",
    "expected": []
  },
  {
    "input": "$sift({'a': 'hello', 'b': 'world', 'hello': 'again'}, λ($v,$k,$o){$lookup($o, $v)})",
    "expected": []
  },
  {
    "input": "λ($arg)<b:b>{$not($arg)}(true)",
    "expected": []
  },
  {
    "input": "λ($arg)<b:b>{$not($arg)}(foo)",
    "expected": []
  },
  {
    "input": "λ($arg)<x:b>{$not($arg)}(null)",
    "expected": []
  },
  {
    "input": "function($x,$y)<n-n:n>{$x+$y}(2, 6)",
    "expected": []
  },
  {
    "input": "[1..5].function($x,$y)<n-n:n>{$x+$y}(6)",
    "expected": []
  },
  {
    "input": "[1..5].function($x,$y)<n-n:n>{$x+$y}(2, 6)",
    "expected": []
  },
  {
    "input": "Age.function($x,$y)<n-n:n>{$x+$y}(6)",
    "expected": []
  },
  {
    "input": "λ($str)<s->{$uppercase($str)}(\"hello\")",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Description.Colour.λ($str)<s->{$uppercase($str)}()",
    "expected": []
  },
  {
    "input": "λ($str, $prefix)<s-s>{$prefix & $str}(\"World\", \"Hello \")",
    "expected": []
  },
  {
    "input": "FirstName.λ($str, $prefix)<s-s>{$prefix & $str}(\"Hello \")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(\"a\")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}([\"a\"])",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(\"a\", \"-\")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}([\"a\"], \"-\")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}([\"a\", \"b\"], \"-\")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<as?:s>{$join($arr, $sep)}([\"a\", \"b\"], \"-\")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}([], \"-\")",
    "expected": []
  },
  {
    "input": "λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(foo, \"-\")",
    "expected": []
  },
  {
    "input": "λ($obj)<o>{$obj}({\"hello\": \"world\"})",
    "expected": []
  },
  {
    "input": "λ($arr)<a<a<n>>>{$arr}([[1]])",
    "expected": []
  },
  {
    "input": "λ($num)<(ns)-:n>{$number($num)}(5)",
    "expected": []
  },
  {
    "input": "λ($num)<(ns)-:n>{$number($num)}(\"5\")",
    "expected": []
  },
  {
    "input": "[1..5].λ($num)<(ns)-:n>{$number($num)}()",
    "expected": []
  },
  {
    "input": "($twice := function($f)<f:f>{function($x)<n:n>{$f($f($x))}};$add2 := function($x)<n:n>{$x+2};$add4 := $twice($add2);$add4(5))",
    "expected": []
  },
  {
    "input": "($twice := function($f)<f<n:n>:f<n:n>>{function($x)<n:n>{$f($f($x))}};$add2 := function($x)<n:n>{$x+2};$add4 := $twice($add2);$add4(5))",
    "expected": []
  },
  {
    "input": "λ($arg)<n<n>>{$arg}(5)",
    "expected": []
  },
  {
    "input": "λ($arg1, $arg2)<nn:a>{[$arg1, $arg2]}(1,\"2\")",
    "expected": []
  },
  {
    "input": "λ($arg1, $arg2)<nn:a>{[$arg1, $arg2]}(1,3,\"2\")",
    "expected": []
  },
  {
    "input": "λ($arg1, $arg2)<nn+:a>{[$arg1, $arg2]}(1,3, 2,\"g\")",
    "expected": []
  },
  {
    "input": "λ($arr)<a<n>>{$arr}([\"3\"]) ",
    "expected": []
  },
  {
    "input": "λ($arr)<a<n>>{$arr}([1, 2, \"3\"]) ",
    "expected": []
  },
  {
    "input": "λ($arr)<a<n>>{$arr}(\"f\")",
    "expected": []
  },
  {
    "input": "($fun := λ($arr)<a<n>>{$arr};$fun(\"f\"))",
    "expected": []
  },
  {
    "input": "λ($arr)<(sa<n>)>>{$arr}([[1]])",
    "expected": []
  },
  {
    "input": "$sort(nothing)",
    "expected": []
  },
  {
    "input": "$sort(1)",
    "expected": []
  },
  {
    "input": "$sort([1,3,2])",
    "expected": []
  },
  {
    "input": "$sort([1,3,22,11])",
    "expected": []
  },
  {
    "input": "[[$], [$sort($)], [$]]",
    "expected": []
  },
  {
    "input": "$sort(Account.Order.Product.Price)",
    "expected": []
  },
  {
    "input": "$sort(Account.Order.Product.\"Product Name\")",
    "expected": []
  },
  {
    "input": "$sort(Account.Order.Product)",
    "expected": []
  },
  {
    "input": "$sort(Account.Order.Product, function($a, $b) { $a.(Price * Quantity) > $b.(Price * Quantity) }).(Price & \" x \" & Quantity)",
    "expected": []
  },
  {
    "input": "$sort(Account.Order.Product, function($a, $b) { $a.Price > $b.Price }).SKU",
    "expected": []
  },
  {
    "input": "\n                (Account.Order.Product\n                  ~> $sort(λ($a,$b){$a.Quantity < $b.Quantity})\n                  ~> $sort(λ($a,$b){$a.Price > $b.Price})\n                ).SKU\n            ",
    "expected": []
  },
  {
    "input": "$split(\"Hello World\", \" \")",
    "expected": []
  },
  {
    "input": "$split(\"Hello\", \" \")",
    "expected": []
  },
  {
    "input": "$split(\"Hello  World\", \" \")",
    "expected": []
  },
  {
    "input": "$split(\"Hello\", \"\")",
    "expected": []
  },
  {
    "input": "$sum($split(\"12345\", \"\").$number($))",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \")",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", 2)",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", 2.5)",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", 10)",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", 0)",
    "expected": []
  },
  {
    "input": "$split(nothing, \" \")",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", -3)",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", null)",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", -5)",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", \", \", \"2\")",
    "expected": []
  },
  {
    "input": "$split(\"a, b, c, d\", true)",
    "expected": []
  },
  {
    "input": "$split(12345, 3)",
    "expected": []
  },
  {
    "input": "$split(12345)",
    "expected": []
  },
  {
    "input": "$split('12💩345💩6', '💩')",
    "expected": []
  },
  {
    "input": "$spread(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$spread((Account.Order.Product.Description))",
    "expected": []
  },
  {
    "input": "$spread(blah)",
    "expected": []
  },
  {
    "input": "$string($spread(function($x){$x*$x}))",
    "expected": []
  },
  {
    "input": "$sqrt(4)",
    "expected": []
  },
  {
    "input": "$sqrt(2)",
    "expected": []
  },
  {
    "input": "$sqrt(nothing)",
    "expected": []
  },
  {
    "input": "$sqrt(-2)",
    "expected": []
  },
  {
    "input": "$string(5)",
    "expected": []
  },
  {
    "input": "$string(22/7)",
    "expected": []
  },
  {
    "input": "$string(1e100)",
    "expected": []
  },
  {
    "input": "$string(1e-100)",
    "expected": []
  },
  {
    "input": "$string(1e-6)",
    "expected": []
  },
  {
    "input": "$string(1e-7)",
    "expected": []
  },
  {
    "input": "$string(1e20)",
    "expected": []
  },
  {
    "input": "$string(1e21)",
    "expected": []
  },
  {
    "input": "Account.Order.$string($sum(Product.(Price* Quantity)))",
    "expected": []
  },
  {
    "input": "$string(true)",
    "expected": []
  },
  {
    "input": "$string(false)",
    "expected": []
  },
  {
    "input": "$string(null)",
    "expected": []
  },
  {
    "input": "$string(blah)",
    "expected": []
  },
  {
    "input": "$string($string)",
    "expected": []
  },
  {
    "input": "$string(function(){true})",
    "expected": []
  },
  {
    "input": "$string(function(){1})",
    "expected": []
  },
  {
    "input": "$string({\"string\": \"hello\"})",
    "expected": []
  },
  {
    "input": "$string([\"string\", 5])",
    "expected": []
  },
  {
    "input": "$string({  \"string\": \"hello\",  \"number\": 78.8 / 2,  \"null\":null,  \"boolean\": false,  \"function\": $sum,  \"lambda\": function(){true},  \"object\": {    \"str\": \"another\",    \"lambda2\": function($n){$n}  },  \"array\": []})",
    "expected": []
  },
  {
    "input": "$string(1/0)",
    "expected": []
  },
  {
    "input": "$string({\"inf\": 1/0})",
    "expected": []
  },
  {
    "input": "$string(2,3)",
    "expected": []
  },
  {
    "input": "$string()",
    "expected": []
  },
  {
    "input": "$string({\"string\": \"hello\"}, false)",
    "expected": []
  },
  {
    "input": "$string({\"string\": \"hello\"}, true)",
    "expected": []
  },
  {
    "input": "$string([\"string\", 5], false)",
    "expected": []
  },
  {
    "input": "$string([\"string\", 5], true)",
    "expected": []
  },
  {
    "input": "$string({  \"string\": \"hello\",  \"number\": 78.8 / 2,  \"null\":null,  \"boolean\": false,  \"function\": $sum,  \"lambda\": function(){true},  \"object\": {    \"str\": \"another\",    \"lambda2\": function($n){$n}  },  \"array\": []}, false)",
    "expected": []
  },
  {
    "input": "$string({  \"string\": \"hello\",  \"number\": 78.8 / 2,  \"null\":null,  \"boolean\": false,  \"function\": $sum,  \"lambda\": function(){true},  \"object\": {    \"str\": \"another\",    \"lambda2\": function($n){$n}  },  \"array\": []}, true)",
    "expected": []
  },
  {
    "input": "$string()",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", 0, 5)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5, 5)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", 6)",
    "expected": []
  },
  {
    "input": "$substring(blah, 6)",
    "expected": []
  },
  {
    "input": "$substring('𝄞💩', 0, 2)",
    "expected": []
  },
  {
    "input": "$substring('𝄞💩', 0, 1)",
    "expected": []
  },
  {
    "input": "$substring('𝄞💩', 1, 1)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5, 5)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5, 4)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5, 1)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5, 0)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -5, -1)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", 0, -6)",
    "expected": []
  },
  {
    "input": "$substring(\"hello world\", -100, 3)",
    "expected": []
  },
  {
    "input": "$substring(\"😂😁😀\", -2, 1)",
    "expected": []
  },
  {
    "input": "$substring(\"😂😁😀\", -3, 1)",
    "expected": []
  },
  {
    "input": "$substring(\"😂😁😀\", -4, 1)",
    "expected": []
  },
  {
    "input": "$substring(\"😂😁😀\", -5, 1)",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Hello World\", \" \")",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Hello World\", \"l\")",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Hello World\", \"f\")",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Hello World\", \"ld\")",
    "expected": []
  },
  {
    "input": "$substringAfter(blah, \"ld\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hello World\", \" \")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hello World\", \"l\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hello World\", \"f\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hello World\", \"He\")",
    "expected": []
  },
  {
    "input": "$substringBefore(blah, \"He\")",
    "expected": []
  },
  {
    "input": "$sum(Account.Order.Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.$sum(Product.(Price * Quantity))",
    "expected": []
  },
  {
    "input": "Account.Order.(OrderID & \": \" & $sum(Product.(Price*Quantity)))",
    "expected": []
  },
  {
    "input": "$sum()",
    "expected": []
  },
  {
    "input": "$sum(1)",
    "expected": []
  },
  {
    "input": "$sum(Account.Order)",
    "expected": []
  },
  {
    "input": "$sum(undefined)",
    "expected": []
  },
  {
    "input": "$toMillis(\"1970-01-01T00:00:00.001Z\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"2018-02-01T09:42:13.123+0000\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"2017-10-30\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"2017-10-30T15:28:34Z\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"2018\")",
    "expected": []
  },
  {
    "input": "$toMillis(foo)",
    "expected": []
  },
  {
    "input": "$toMillis(\"foo\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"01-02-2018\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"2018-02-03 11:15:33\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"201802\", \"[Y0001][M01]\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"201802\", \"[Y,*-4][M01]\")",
    "expected": []
  },
  {
    "input": "$toMillis(\"20180205\", \"[Y0001][M01][D01]\")",
    "expected": []
  },
  {
    "input": "$toMillis(undefined, 'pic')",
    "expected": []
  },
  {
    "input": "$toMillis('Hello', 'Hello')",
    "expected": []
  },
  {
    "input": "$toMillis('2018', '[Y1]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-03-27', '[Y1]-[M01]-[D01]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-03-27T14:03:00.123Z', '[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01].[f001]Z')",
    "expected": []
  },
  {
    "input": "$toMillis('27th 3 1976', '[D1o] [M#1] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('21st 12 1881', '[D1o] [M01] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('2nd 12 2012', '[D1o] [M01] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('MCMLXXXIV', '[YI]')",
    "expected": []
  },
  {
    "input": "$toMillis('27 03 MMXVIII', '[D1] [M01] [YI]')",
    "expected": []
  },
  {
    "input": "$toMillis('27 iii MMXVIII', '[D1] [Mi] [YI]')",
    "expected": []
  },
  {
    "input": "$toMillis('w C mmxviii', '[Da] [MA] [Yi]')",
    "expected": []
  },
  {
    "input": "$toMillis('ae C mmxviii', '[Da] [MA] [Yi]')",
    "expected": []
  },
  {
    "input": "$toMillis('27th April 2008', '[D1o] [MNn] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('21 August 2017', '[D1] [MNn] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('2 Feb 2012', '[D1] [MNn,3-3] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('one thousand, nine hundred and eighty-four', '[Yw]')",
    "expected": []
  },
  {
    "input": "$toMillis('nineteen hundred and eighty-four', '[Yw]')",
    "expected": []
  },
  {
    "input": "$toMillis('twenty-seven April 2008', '[Dw] [MNn] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('twenty-seventh April 2008', '[Dw] [MNn] [Y0001]')",
    "expected": []
  },
  {
    "input": "$toMillis('twenty-first August two thousand and seventeen', '[Dw] [MNn] [Yw]')",
    "expected": []
  },
  {
    "input": "$toMillis('TWENTY-SECOND August two thousand and seventeen', '[DW] [MNn] [Yw]')",
    "expected": []
  },
  {
    "input": "$toMillis('Twentieth of August, two thousand and seventeen', '[DW] of [MNn], [Yw]')",
    "expected": []
  },
  {
    "input": "$toMillis('4/4/2018 12:06 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')",
    "expected": []
  },
  {
    "input": "$toMillis('4/4/2018 06:30 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')",
    "expected": []
  },
  {
    "input": "$toMillis('4/4/2018 12:06 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')",
    "expected": []
  },
  {
    "input": "$toMillis('4/4/2018 11:30 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-094', '[Y0001]-[d001]')",
    "expected": []
  },
  {
    "input": "$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringBefore('T') = $substringBefore($now(), 'T')",
    "expected": []
  },
  {
    "input": "$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringAfter('T')",
    "expected": []
  },
  {
    "input": "$toMillis('Wednesday, 14th November 2018', '[FNn], [D1o] [MNn] [Y]') ~> $fromMillis()",
    "expected": []
  },
  {
    "input": "$toMillis('Mon, Twelfth November 2018', '[FNn,*-3], [DWwo] [MNn] [Y]') ~> $fromMillis()",
    "expected": []
  },
  {
    "input": "$toMillis('2018--180', '[Y]--[d]') ~> $fromMillis()",
    "expected": []
  },
  {
    "input": "$toMillis('three hundred and sixty-fifth day of 2018', '[dwo] day of [Y]') ~> $fromMillis()",
    "expected": []
  },
  {
    "input": "$toMillis('irrelevent string', '[Y]-[M]-[D]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-05-22', '[Y]-[M]-[q]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-05-22', '[YN]-[M]-[D]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-22', '[Y]-[D]')",
    "expected": []
  },
  {
    "input": "$toMillis('5-22 23:59', '[M]-[D] [m]:[s]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-3-2-5', '[X]-[x]-[w]-[F1]')",
    "expected": []
  },
  {
    "input": "$toMillis('2018-32-5', '[X]-[W]-[F1]')",
    "expected": []
  },
  {
    "input": "$toMillis('2020-09-09 08:00:00 +02:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~> $fromMillis() ",
    "expected": []
  },
  {
    "input": "$toMillis('2020-09-09 08:00:00 GMT-05:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z]') ~> $fromMillis() ",
    "expected": []
  },
  {
    "input": "$toMillis('2020-09-09 12:00:00 +05:30', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~> $fromMillis() ",
    "expected": []
  },
  {
    "input": "$toMillis('2020-09-09 12:00:00 GMT-5', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z01]') ~> $fromMillis() ",
    "expected": []
  },
  {
    "input": "$toMillis('2020-09-09 12:00:00 +0530', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z0001]') ~> $fromMillis() ",
    "expected": []
  },
  {
    "input": "$trim(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$trim(\"   Hello  \n  \t World  \t \")",
    "expected": []
  },
  {
    "input": "$trim()",
    "expected": []
  },
  {
    "input": "($var:= undefined; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= null; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= 123; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= '123'; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= true; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= 'true'; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= []; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= ['a']; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= ['a','b']; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= function(){true}; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= (λ($v, $i, $a) {$v.price = $max($a.price)}); $type($var))",
    "expected": []
  },
  {
    "input": "($var:= {}; $type($var))",
    "expected": []
  },
  {
    "input": "($var:= {\"foo\":\"bar\"}; $type($var))",
    "expected": []
  },
  {
    "input": "$uppercase(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$uppercase(blah)",
    "expected": []
  },
  {
    "input": "$zip([1,2,3],[4,5,6])",
    "expected": []
  },
  {
    "input": "$zip([1,2,3],[4,5,6],[7,8,9])",
    "expected": []
  },
  {
    "input": "$zip([1,2,3],[4,5],[7,8,9])",
    "expected": []
  },
  {
    "input": "$zip([1,2,3])",
    "expected": []
  },
  {
    "input": "$zip(1,2,3)",
    "expected": []
  },
  {
    "input": "$zip([1,2,3], [4,5,6], nothing)",
    "expected": []
  },
  {
    "input": "($twice:=function($f){function($x){$f($f($x))}}; $add3:=function($y){$y+3}; $add6:=$twice($add3); $add6(7))",
    "expected": []
  },
  {
    "input": "λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n < 2 ? 1 : $n * $f($n - 1) } })(6)",
    "expected": []
  },
  {
    "input": "λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n <= 1 ? $n : $f($n-1) + $f($n-2) } })(6) ",
    "expected": []
  },
  {
    "input": "(library.books~>$filter(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn",
    "expected": []
  },
  {
    "input": "nothing~>$filter(λ($v, $i, $a) {$v.price = $max($a.price)})",
    "expected": []
  },
  {
    "input": "$filter(data, function($d) { true })",
    "expected": []
  },
  {
    "input": "$filter([0, 1, 2], $boolean)",
    "expected": []
  },
  {
    "input": "(  $data := {    \"one\": [1,2,3,4,5],    \"two\": [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($data.one, $add) )  ",
    "expected": []
  },
  {
    "input": "(  $data := {    \"one\": [1,2,3,4,5],    \"two\": [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($add) )  ",
    "expected": []
  },
  {
    "input": "$map([1,2,3], $string)",
    "expected": []
  },
  {
    "input": "Account.Order.Product ~> $map(λ($prod, $index) { $index+1 & \": \" & $prod.\"Product Name\" })",
    "expected": []
  },
  {
    "input": "Account.Order.Product ~> $map(λ($prod, $index, $arr) { $index+1 & \"/\" & $count($arr) & \": \" & $prod.\"Product Name\" })",
    "expected": []
  },
  {
    "input": "$map(Phone, function($v, $i) {$i[$v.type=\"office\"]})",
    "expected": []
  },
  {
    "input": "$map(Phone, function($v, $i) {$v.type=\"office\" ? $i})",
    "expected": []
  },
  {
    "input": "$map(Phone, function($v, $i) {$v.type=\"office\" ? $i: null})",
    "expected": []
  },
  {
    "input": "$map(Phone, function($v, $i) {$v.type=\"office\" ? $i: null})",
    "expected": []
  },
  {
    "input": "$map([0, 1, 2], $boolean)",
    "expected": []
  },
  {
    "input": "(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y})) ",
    "expected": []
  },
  {
    "input": "(  $concat := function($s){function($a, $b){$string($a) & $s & $string($b)}};  $comma_join := $concat(' ... ');  $reduce([1,2,3,4,5], $comma_join))      ",
    "expected": []
  },
  {
    "input": "(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y}, 2))",
    "expected": []
  },
  {
    "input": "(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))",
    "expected": []
  },
  {
    "input": "(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))",
    "expected": []
  },
  {
    "input": "$reduce(Account.Order.Product.Quantity, $append)",
    "expected": []
  },
  {
    "input": "$reduce(Account.Order.Product.Quantity, $append)",
    "expected": []
  },
  {
    "input": "($product := function($a, $b) { $a * $b };$power := function($x, $n) { $n = 0 ? 1 : $reduce([1..$n].($x), $product) };[0..5].$power(2, $))",
    "expected": []
  },
  {
    "input": "(  $seq := 1;  $reduce($seq, function($x){$x}))",
    "expected": []
  },
  {
    "input": "(library.books~>$single(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn",
    "expected": []
  },
  {
    "input": "nothing~>$single(λ($v, $i, $a) {$v.price = $max($a.price)})",
    "expected": []
  },
  {
    "input": "$single(data, function($d) { true })",
    "expected": []
  },
  {
    "input": "$single([0, 1, 2], $boolean)",
    "expected": []
  },
  {
    "input": "$single([0, 1, 2], function($v) {$v = 3})",
    "expected": []
  },
  {
    "input": "$single([0, 1, 2])",
    "expected": []
  },
  {
    "input": "$single([0])",
    "expected": []
  },
  {
    "input": "$single([])",
    "expected": []
  },
  {
    "input": "$single([true, false, true], function($v) {$v=false})",
    "expected": []
  },
  {
    "input": "$single(['zero', 'one', 'two'], function($v, $i, $k) {$i=1})",
    "expected": []
  },
  {
    "input": "Phone ~> $filter(function($p) {$p.type = 'home'}) ~> $single(function($p) {$p.number = '0203 544 1234'})",
    "expected": []
  },
  {
    "input": "(  $data := {    \"one\": [1,2,3,4,5],    \"two\": [5,4,3,2,1]  };  $map($zip($data.one, $data.two), $sum)) ",
    "expected": []
  },
  {
    "input": "(  $data := {    \"one\": [1,2,3,4,5],    \"two\": [5,4,3,2,1]  };  $data.$zip(one, two) ~> $map($sum)) ",
    "expected": []
  },
  {
    "input": "(  $data := {    \"one\": [1],    \"two\": [5]  };  $data.$zip(one, two) ~> $map($sum)) ",
    "expected": []
  },
  {
    "input": "(  $data := {    \"one\": 1,    \"two\": 5  };  $data.$zip(one, two) ~> $map($sum)) ",
    "expected": []
  },
  {
    "input": "1 in [1,2]",
    "expected": []
  },
  {
    "input": "3 in [1,2]",
    "expected": []
  },
  {
    "input": "\"hello\" in [1,2]",
    "expected": []
  },
  {
    "input": "\"world\" in [\"hello\", \"world\"]",
    "expected": []
  },
  {
    "input": "in in [\"hello\", \"world\"]",
    "expected": []
  },
  {
    "input": "\"world\" in in",
    "expected": []
  },
  {
    "input": "\"hello\" in \"hello\"",
    "expected": []
  },
  {
    "input": "library.books[\"Aho\" in authors].title",
    "expected": []
  },
  {
    "input": "content.integration.$lowercase(name)",
    "expected": []
  },
  {
    "input": "Employee@$e.(Contact)[ssn = $e.SSN].{ 'name': $e.(FirstName & ' ' & Surname), 'phone': Phone[type='mobile'].number }",
    "expected": []
  },
  {
    "input": "Employee@$e.(Contact)[ssn = $e.SSN]{ $e.FirstName: Phone[type='mobile'].number }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $join($c.Phone.number, ', ') }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number ~> $join(', ') }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number[] }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.FirstName: $c.Phone.number }",
    "expected": []
  },
  {
    "input": "Employee@$e^($e.Surname).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }",
    "expected": []
  },
  {
    "input": "Employee@$e^($e.FirstName).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^($) }",
    "expected": []
  },
  {
    "input": "Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^(>$) }",
    "expected": []
  },
  {
    "input": "$@$i",
    "expected": []
  },
  {
    "input": "Account.Order@o.Product",
    "expected": []
  },
  {
    "input": "Account.Order@$o#i.Product",
    "expected": []
  },
  {
    "input": "Account.Order[1]@$o.Product",
    "expected": []
  },
  {
    "input": "Account.Order^(>OrderID)@$o.Product.{ 'name':`Product Name`, 'orderid':$o.OrderID }",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3]",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3] = $[[0..2]]",
    "expected": []
  },
  {
    "input": "$.$#$pos[$pos<3]",
    "expected": []
  },
  {
    "input": "$.$#$pos[$pos<3] = $.$[[0..2]]",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3]^($)",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3]^(>$)",
    "expected": []
  },
  {
    "input": "$^($)#$pos[$pos<3] ",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3][1]",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3][1][]",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3]^($)[-1]",
    "expected": []
  },
  {
    "input": "$#$pos[][$pos<3]^($)[-1]",
    "expected": []
  },
  {
    "input": "$#$pos[$pos<3]^($)[-1][]",
    "expected": []
  },
  {
    "input": "$[[1..4]]#$pos[$pos>=2]",
    "expected": []
  },
  {
    "input": "Account.Order#$o.Product[ProductID=858383].{ 'Product': `Product Name`, 'Order Index': $o }",
    "expected": []
  },
  {
    "input": "Account.Order#$i.Missing",
    "expected": []
  },
  {
    "input": "Account.Order#$i.Product{ $string(ProductID): $i }",
    "expected": []
  },
  {
    "input": "library.books#$pos.$[$substring(title,0,3) = 'The'].$pos",
    "expected": []
  },
  {
    "input": "function($x){$x*$x}(5)",
    "expected": []
  },
  {
    "input": "function($x){$x>5 ? \"foo\"}(6)",
    "expected": []
  },
  {
    "input": "function($x){$x>5 ? \"foo\"}(3)",
    "expected": []
  },
  {
    "input": "($factorial:= function($x){$x <= 1 ? 1 : $x * $factorial($x-1)}; $factorial(4))",
    "expected": []
  },
  {
    "input": "($fibonacci := function($x){$x <= 1 ? $x : $fibonacci($x-1) + $fibonacci($x-2)}; [1,2,3,4,5,6,7,8,9].$fibonacci($))",
    "expected": []
  },
  {
    "input": "($nth_price := function($n) { (Account.Order.Product.Price)[$n] }; $nth_price(1) )",
    "expected": []
  },
  {
    "input": "            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };              $odd := function($n) { $n = 0 ? false : $even($n-1) };              $even(82)            )",
    "expected": []
  },
  {
    "input": "            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };               $odd := function($n) { $n = 0 ? false : $even($n-1) };               $even(65) )",
    "expected": []
  },
  {
    "input": "        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(65)         )",
    "expected": []
  },
  {
    "input": "(  $gcd := λ($a, $b){$b = 0 ? $a : $gcd($b, $a%$b) };  [$gcd(8,12), $gcd(9,12)])",
    "expected": []
  },
  {
    "input": "(  $range := function($start, $end, $step) { (    $step:=($step?$step:1);    $start+$step > $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15))        ",
    "expected": []
  },
  {
    "input": "(  $range := function($start, $end, $step) { (      $step:=($step?$step:1);        $start+$step > $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15,2))        ",
    "expected": []
  },
  {
    "input": "( $median := λ($x){$sort($x)[$count($x)/2]};  $median([5,4,3,2,1,6,7,8,1]) )",
    "expected": []
  },
  {
    "input": "{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}",
    "expected": []
  },
  {
    "input": "{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}",
    "expected": []
  },
  {
    "input": "{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}",
    "expected": []
  },
  {
    "input": "{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}",
    "expected": []
  },
  {
    "input": "\"hello\"",
    "expected": []
  },
  {
    "input": "'hello'",
    "expected": []
  },
  {
    "input": "\"Wayne's World\"",
    "expected": []
  },
  {
    "input": "42",
    "expected": []
  },
  {
    "input": "-42",
    "expected": []
  },
  {
    "input": "3.14159",
    "expected": []
  },
  {
    "input": "6.022e23",
    "expected": []
  },
  {
    "input": "1.602E-19",
    "expected": []
  },
  {
    "input": "10e1000",
    "expected": []
  },
  {
    "input": "\"hello\\tworld\"",
    "expected": []
  },
  {
    "input": "\"hello\\nworld\"",
    "expected": []
  },
  {
    "input": "\"hello \\\"world\\\"\"",
    "expected": []
  },
  {
    "input": "\"C:\\\\Test\\\\test.txt\"",
    "expected": []
  },
  {
    "input": "\"\\u03BB-calculus rocks\"",
    "expected": []
  },
  {
    "input": "\"𝄞\"",
    "expected": []
  },
  {
    "input": "\"\\y\"",
    "expected": []
  },
  {
    "input": "\"\\u\"",
    "expected": []
  },
  {
    "input": "\"\\u123t\"",
    "expected": []
  },
  {
    "input": "{ 'foo': { 'sequence': 123, 'bar': 'baz' } } ",
    "expected": []
  },
  {
    "input": "{ 'foo': { 'sequence': true, 'bar': 'baz' } } ",
    "expected": []
  },
  {
    "input": "$split('some text', $uppercase)",
    "expected": []
  },
  {
    "input": "fdf",
    "expected": []
  },
  {
    "input": "fdf.ett",
    "expected": []
  },
  {
    "input": "fdf.ett[10]",
    "expected": []
  },
  {
    "input": "fdf.ett[vc > 10]",
    "expected": []
  },
  {
    "input": "fdf.ett + 27",
    "expected": []
  },
  {
    "input": "$fdsd",
    "expected": []
  },
  {
    "input": "[1..10][[1..3,8,-1]]",
    "expected": []
  },
  {
    "input": "[1..10][[1..3,8,5]]",
    "expected": []
  },
  {
    "input": "[1..10][[1..3,8,false]]",
    "expected": []
  },
  {
    "input": "null",
    "expected": []
  },
  {
    "input": "[null]",
    "expected": []
  },
  {
    "input": "[null, null]",
    "expected": []
  },
  {
    "input": "$not(null)",
    "expected": []
  },
  {
    "input": "null = null",
    "expected": []
  },
  {
    "input": "null != null",
    "expected": []
  },
  {
    "input": "{\"true\": true, \"false\":false, \"null\": null}",
    "expected": []
  },
  {
    "input": "foo.bar + bar",
    "expected": []
  },
  {
    "input": "bar + foo.bar",
    "expected": []
  },
  {
    "input": "foo.bar - bar",
    "expected": []
  },
  {
    "input": "bar - foo.bar",
    "expected": []
  },
  {
    "input": "foo.bar * bar",
    "expected": []
  },
  {
    "input": "bar * foo.bar",
    "expected": []
  },
  {
    "input": "foo.bar / bar",
    "expected": []
  },
  {
    "input": "bar / foo.bar",
    "expected": []
  },
  {
    "input": "foo.bar % bar",
    "expected": []
  },
  {
    "input": "bar % foo.bar",
    "expected": []
  },
  {
    "input": "bar + foo.bar * bar",
    "expected": []
  },
  {
    "input": "foo.bar * bar + bar",
    "expected": []
  },
  {
    "input": "24 * notexist",
    "expected": []
  },
  {
    "input": "notexist + 1",
    "expected": []
  },
  {
    "input": "1/(10e300 * 10e100) ",
    "expected": []
  },
  {
    "input": "\"5\" + \"5\"",
    "expected": []
  },
  {
    "input": "- notexist",
    "expected": []
  },
  {
    "input": "false + 1",
    "expected": []
  },
  {
    "input": "false + $x",
    "expected": []
  },
  {
    "input": "{}",
    "expected": []
  },
  {
    "input": "{\"key\": \"value\"}",
    "expected": []
  },
  {
    "input": "{\"one\": 1, \"two\": 2}",
    "expected": []
  },
  {
    "input": "{\"one\": 1, \"two\": 2}.two",
    "expected": []
  },
  {
    "input": "{\"one\": 1, \"two\": {\"three\": 3, \"four\": \"4\"}}",
    "expected": []
  },
  {
    "input": "{\"one\": 1, \"two\": [3, \"four\"]}",
    "expected": []
  },
  {
    "input": "{\"test\": ()}",
    "expected": []
  },
  {
    "input": "blah.{}",
    "expected": []
  },
  {
    "input": "Account.Order{OrderID: Product.\"Product Name\"}",
    "expected": []
  },
  {
    "input": "Account.Order.{OrderID: Product.\"Product Name\"}",
    "expected": []
  },
  {
    "input": "Account.Order.Product{$string(ProductID): Price}",
    "expected": []
  },
  {
    "input": "Account.Order.Product{$string(ProductID): (Price)[0]}",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{$string(ProductID): Price}",
    "expected": []
  },
  {
    "input": "Account.Order.Product{ProductID: \"Product Name\"}",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{ProductID: \"Product Name\"}",
    "expected": []
  },
  {
    "input": "Account.Order{OrderID: $sum(Product.(Price*Quantity))}",
    "expected": []
  },
  {
    "input": "Account.Order.{OrderID: $sum(Product.(Price*Quantity))}",
    "expected": []
  },
  {
    "input": "Account.Order.Product{$.\"Product Name\": Price, $.\"Product Name\": Price}",
    "expected": []
  },
  {
    "input": "Account.Order.Product{`Product Name`: Price, SKU: Price}",
    "expected": []
  },
  {
    "input": "Account.Order{  OrderID: {    \"TotalPrice\":$sum(Product.(Price * Quantity)),    \"Items\": Product.\"Product Name\"  }}",
    "expected": []
  },
  {
    "input": "{  \"Order\": Account.Order.{      \"ID\": OrderID,      \"Product\": Product.{          \"Name\": $.\"Product Name\",          \"SKU\": ProductID,          \"Details\": {            \"Weight\": Description.Weight,            \"Dimensions\": Description.(Width & \" x \" & Height & \" x \" & Depth)          }        },      \"Total Price\": $sum(Product.(Price * Quantity))    }}",
    "expected": []
  },
  {
    "input": "{  \"Order\": Account.Order.{      \"ID\": OrderID,      \"Product\": Product.{          \"Name\": `Product Name`,          \"SKU\": ProductID,          \"Details\": {            \"Weight\": Description.Weight,            \"Dimensions\": Description.(Width & \" x \" & Height & \" x \" & Depth)          }        },      \"Total Price\": $sum(Product.(Price * Quantity))    }}",
    "expected": []
  },
  {
    "input": "Phone{type: $join(number, \", \"), \"phone\":number}",
    "expected": []
  },
  {
    "input": "$.{ type: $average(value), kind: $sum(value) } ",
    "expected": []
  },
  {
    "input": "{ type: $average(value), kind: $sum(value) } ",
    "expected": []
  },
  {
    "input": "$${id:{'label':label,'value':value}}",
    "expected": []
  },
  {
    "input": "{'hello': 'world'}.% ",
    "expected": []
  },
  {
    "input": "%",
    "expected": []
  },
  {
    "input": "%()",
    "expected": []
  },
  {
    "input": "%(1)",
    "expected": []
  },
  {
    "input": "%%",
    "expected": []
  },
  {
    "input": "(%)",
    "expected": []
  },
  {
    "input": "(%%)",
    "expected": []
  },
  {
    "input": "library.loans.%%",
    "expected": []
  },
  {
    "input": "$.%",
    "expected": []
  },
  {
    "input": "$$.%",
    "expected": []
  },
  {
    "input": "library.loans.%.%.%",
    "expected": []
  },
  {
    "input": "library.%%%",
    "expected": []
  },
  {
    "input": "library.(%%%)",
    "expected": []
  },
  {
    "input": "library.(%% %)",
    "expected": []
  },
  {
    "input": "library.(% %%)",
    "expected": []
  },
  {
    "input": "library.(% % %)",
    "expected": []
  },
  {
    "input": "Account.Order.Product.[`Product Name`, %.OrderID]",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{ `Product Name`: [Quantity, %.OrderID] }",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{ `Product Name`: [Quantity, (%.OrderID)] }",
    "expected": []
  },
  {
    "input": "Account.Order.Product[%.OrderID='order104'].SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product[%.%.`Account Name`='Firefly'].SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Price[%.%.OrderID='order103']",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Price.%[%.OrderID='order103'].SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product[%.OrderID='order104'][%.%.`Account Name`='Firefly'].SKU",
    "expected": []
  },
  {
    "input": "(Account.Order.Product)[%.OrderID='order104'].SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product.{ %.OrderID: Price * Quantity }",
    "expected": []
  },
  {
    "input": "Account.Order.().%",
    "expected": []
  },
  {
    "input": "Account.Order.Product.SKU^(%.Price)",
    "expected": []
  },
  {
    "input": "Account.Order.Product.SKU^(%.Price, >%.%.OrderID)",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Description.{ 'Colour': Colour, 'Total': %.Price * %.Quantity }",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Description.{ 'Item': Colour & ' ' & %.`Product Name`, 'Discounted': (%.%.OrderID = 'order103') ? %.Price / 2 : %.Price }",
    "expected": []
  },
  {
    "input": "Account.Order.Product.( $parent := %; %.OrderID )",
    "expected": []
  },
  {
    "input": "Account.Order.Product.( $parent := %; $parent.OrderID )",
    "expected": []
  },
  {
    "input": "library.loans@$L.books@$B[$L.isbn=$B.isbn].{ 'book': $B.title, 'parent': $keys(%) }",
    "expected": []
  },
  {
    "input": "library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%) }",
    "expected": []
  },
  {
    "input": "library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%.%) }",
    "expected": []
  },
  {
    "input": "library.loans@$L.books@$B[$L.isbn=$B.isbn].customers@$C[$C.id=$L.customer].{ 'book': $B.title, 'customer': $C.name, 'grandparent': $keys(%.%) }",
    "expected": []
  },
  {
    "input": "foo.(blah).baz.fud",
    "expected": []
  },
  {
    "input": "foo.(blah.baz).fud",
    "expected": []
  },
  {
    "input": "(foo.blah.baz).fud",
    "expected": []
  },
  {
    "input": "foo.blah.(baz.fud)",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)",
    "expected": []
  },
  {
    "input": "(foo).(blah).baz.(fud)",
    "expected": []
  },
  {
    "input": "(foo.(blah).baz.fud)",
    "expected": []
  },
  {
    "input": "(4 + 2) / 2",
    "expected": []
  },
  {
    "input": "(  $add := function($x, $y){$x+$y};  $add2 := $add(?, 2);  $add2(3))",
    "expected": []
  },
  {
    "input": "(  $add := function($x, $y){$x+$y};  $add2 := $add(2, ?);  $add2(4))",
    "expected": []
  },
  {
    "input": "(  $firstn := $substring(?, 0, ?);  $first5 := $firstn(?, 5);  $first5(\"Hello World\"))",
    "expected": []
  },
  {
    "input": "substring(?, 0, ?)",
    "expected": []
  },
  {
    "input": "unknown(?)",
    "expected": []
  },
  {
    "input": "nothing[x=6][y=3].number",
    "expected": []
  },
  {
    "input": "clues[x=6][y=3].number",
    "expected": []
  },
  {
    "input": "$[x=6][y=3].number",
    "expected": []
  },
  {
    "input": "Account.Order.Product[$lowercase(Description.Colour) = \"purple\"][0].Price",
    "expected": []
  },
  {
    "input": "foo.\"blah\"",
    "expected": []
  },
  {
    "input": "foo.\"blah\".baz.'fud'",
    "expected": []
  },
  {
    "input": "\"foo\".\"blah\".\"baz\".\"fud\"",
    "expected": []
  },
  {
    "input": "foo.\"blah.baz\"",
    "expected": []
  },
  {
    "input": "foo.`blah`",
    "expected": []
  },
  {
    "input": "foo.`blah`.baz.'fud'",
    "expected": []
  },
  {
    "input": "`foo`.`blah`.`baz`.`fud`",
    "expected": []
  },
  {
    "input": "foo.`blah.baz`",
    "expected": []
  },
  {
    "input": "[0..9]",
    "expected": []
  },
  {
    "input": "[0..9][$ % 2 = 0]",
    "expected": []
  },
  {
    "input": "[0, 4..9, 20, 22]",
    "expected": []
  },
  {
    "input": "[5..2]",
    "expected": []
  },
  {
    "input": "[5..2, 2..5]",
    "expected": []
  },
  {
    "input": "[-2..2]",
    "expected": []
  },
  {
    "input": "[-2..2].($*$)",
    "expected": []
  },
  {
    "input": "[-2..blah]",
    "expected": []
  },
  {
    "input": "[blah..5, 3, -2..blah]",
    "expected": []
  },
  {
    "input": "[1.1 .. 5]",
    "expected": []
  },
  {
    "input": "[1 .. 5.5]",
    "expected": []
  },
  {
    "input": "[10..1.5]",
    "expected": []
  },
  {
    "input": "[true..false]",
    "expected": []
  },
  {
    "input": "['dogs'..'cats']",
    "expected": []
  },
  {
    "input": "[1..'']",
    "expected": []
  },
  {
    "input": "[1..[]]",
    "expected": []
  },
  {
    "input": "[1..{}]",
    "expected": []
  },
  {
    "input": "[1..false]",
    "expected": []
  },
  {
    "input": "[2..true]",
    "expected": []
  },
  {
    "input": "[$x..true]",
    "expected": []
  },
  {
    "input": "[false..$x]",
    "expected": []
  },
  {
    "input": "[1..10000000] ~> $count()",
    "expected": []
  },
  {
    "input": "[0..10000000] ~> $count()",
    "expected": []
  },
  {
    "input": "[1..10000001] ~> $count()",
    "expected": []
  },
  {
    "input": "[100..10000099] ~> $count()",
    "expected": []
  },
  {
    "input": "$split(\"ababbxabbcc\",/b+/)",
    "expected": []
  },
  {
    "input": "$split(\"ababbxabbcc\",/b+/, 2)",
    "expected": []
  },
  {
    "input": "$split(\"ababbxabbcc\",/d+/)",
    "expected": []
  },
  {
    "input": "$contains(\"ababbxabbcc\",/ab+/)",
    "expected": []
  },
  {
    "input": "$contains(\"ababbxabbcc\",/ax+/)",
    "expected": []
  },
  {
    "input": "Account.Order.Product[$contains($.\"Product Name\", /hat/)].ProductID",
    "expected": []
  },
  {
    "input": "Account.Order.Product[$contains($.\"Product Name\", /hat/i)].ProductID",
    "expected": []
  },
  {
    "input": "$replace(\"ababbxabbcc\",/b+/, \"yy\")",
    "expected": []
  },
  {
    "input": "$replace(\"ababbxabbcc\",/b+/, \"yy\", 2)",
    "expected": []
  },
  {
    "input": "$replace(\"ababbxabbcc\",/b+/, \"yy\", 0)",
    "expected": []
  },
  {
    "input": "$replace(\"ababbxabbcc\",/d+/, \"yy\")",
    "expected": []
  },
  {
    "input": "$replace(\"John Smith\", /(\\w+)\\s(\\w+)/, \"$2, $1\")",
    "expected": []
  },
  {
    "input": "$replace(\"265USD\", /([0-9]+)USD/, \"$$$1\")",
    "expected": []
  },
  {
    "input": "$replace(\"265USD\", /([0-9]+)USD/, \"$w\")",
    "expected": []
  },
  {
    "input": "$replace(\"265USD\", /([0-9]+)USD/, \"$0 -> $$$1\")",
    "expected": []
  },
  {
    "input": "$replace(\"265USD\", /([0-9]+)USD/, \"$0$1$2\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcd\", /(ab)|(a)/, \"[1=$1][2=$2]\")",
    "expected": []
  },
  {
    "input": "$replace(\"abracadabra\", /bra/, \"*\")",
    "expected": []
  },
  {
    "input": "$replace(\"abracadabra\", /a.*a/, \"*\")",
    "expected": []
  },
  {
    "input": "$replace(\"abracadabra\", /a.*?a/, \"*\")",
    "expected": []
  },
  {
    "input": "$replace(\"abracadabra\", /a/, \"\")",
    "expected": []
  },
  {
    "input": "$replace(\"abracadabra\", /a(.)/, \"a$1$1\")",
    "expected": []
  },
  {
    "input": "$replace(\"abracadabra\", /.*?/, \"$1\")",
    "expected": []
  },
  {
    "input": "$replace(\"AAAA\", /A+/, \"b\")",
    "expected": []
  },
  {
    "input": "$replace(\"AAAA\", /A+?/, \"b\")",
    "expected": []
  },
  {
    "input": "$replace(\"darted\", /^(.*?)d(.*)$/, \"$1c$2\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcdefghijklmno\", /(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)/, \"$8$5$12$12$18$123\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcdefghijklmno\", /xyz/, \"$8$5$12$12$18$123\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcdefghijklmno\", /ijk/, \"$8$5$12$12$18$123\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcdefghijklmno\", /(ijk)/, \"$8$5$12$12$18$123\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcdefghijklmno\", /ijk/, \"$x\")",
    "expected": []
  },
  {
    "input": "$replace(\"abcdefghijklmno\", /(ijk)/, \"$x$\")",
    "expected": []
  },
  {
    "input": "Account.Order.Product.$replace($.\"Product Name\", /hat/i, function($match) { \"foo\" })",
    "expected": []
  },
  {
    "input": "Account.Order.Product.$replace($.\"Product Name\", /(h)(at)/i, function($match) { $uppercase($match.match) })",
    "expected": []
  },
  {
    "input": "$replace(\"temperature = 68F today\", /(-?\\d+(?:\\.\\d*)?)F\\b/, function($m) { ($number($m.groups[0]) - 32) * 5/9 & \"C\" })",
    "expected": []
  },
  {
    "input": "Account.Order.Product.$replace($.\"Product Name\", /hat/i, function($match) { true })",
    "expected": []
  },
  {
    "input": "Account.Order.Product.$replace($.\"Product Name\", /hat/i, function($match) { 42 })",
    "expected": []
  },
  {
    "input": "$map($, $match(?, /^(\\w*\\s\\w*)/)).match",
    "expected": []
  },
  {
    "input": "$map($, function($i){ $match($i, /^(\\w*\\s\\w*)/) }).match",
    "expected": []
  },
  {
    "input": "nest0.nest1[0]",
    "expected": []
  },
  {
    "input": "foo.blah[0].baz.fud",
    "expected": []
  },
  {
    "input": "foo.blah[1].baz.fud",
    "expected": []
  },
  {
    "input": "foo.blah[-1].bazz",
    "expected": []
  },
  {
    "input": "(foo.blah)[1].baz.fud",
    "expected": []
  },
  {
    "input": "foo.blah.baz.fud[0]",
    "expected": []
  },
  {
    "input": "foo.blah.baz.fud[-1]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[0]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[1]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[5 * 0.2]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[-1]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[-2]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[2-4]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[-(4-2)]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz.fud)[$$.foo.bar / 30]",
    "expected": []
  },
  {
    "input": "foo.blah[0].baz",
    "expected": []
  },
  {
    "input": "foo.blah.baz[0]",
    "expected": []
  },
  {
    "input": "(foo.blah.baz)[0]",
    "expected": []
  },
  {
    "input": "$[0]",
    "expected": []
  },
  {
    "input": "$[1]",
    "expected": []
  },
  {
    "input": "$[-1]",
    "expected": []
  },
  {
    "input": "$[1][0]",
    "expected": []
  },
  {
    "input": "$[1.1][0.9]",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Price^($)",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Price^(<$)",
    "expected": []
  },
  {
    "input": "Account.Order.Product.Price^(>$)",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).Description.Colour",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price * Quantity).Description.Colour",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Quantity, Description.Colour).Description.Colour",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Quantity, >Description.Colour).Description.Colour",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "Account.Order.Product^(Price).SKU",
    "expected": []
  },
  {
    "input": "$^(age).name",
    "expected": []
  },
  {
    "input": "($^(age)).name",
    "expected": []
  },
  {
    "input": "$^(age)[0].name",
    "expected": []
  },
  {
    "input": "($^(age))[0].name",
    "expected": []
  },
  {
    "input": "($^(age)[0]).name",
    "expected": []
  },
  {
    "input": "$[0]^(age)",
    "expected": []
  },
  {
    "input": "Account.Order#$o.Product^(ProductID).{ 'Product': `Product Name`, 'Order Index': $o }",
    "expected": []
  },
  {
    "input": "\"foo\" & \"bar\"",
    "expected": []
  },
  {
    "input": "\"foo\"&\"bar\"",
    "expected": []
  },
  {
    "input": "foo.blah[0].baz.fud &foo.blah[1].baz.fud",
    "expected": []
  },
  {
    "input": "foo.(blah[0].baz.fud & blah[1].baz.fud)",
    "expected": []
  },
  {
    "input": "foo.(blah[0].baz.fud & none)",
    "expected": []
  },
  {
    "input": "foo.(none.here & blah[1].baz.fud)",
    "expected": []
  },
  {
    "input": "[1,2]&[3,4]",
    "expected": []
  },
  {
    "input": "[1,2]&3",
    "expected": []
  },
  {
    "input": "1&2",
    "expected": []
  },
  {
    "input": "1&[2]",
    "expected": []
  },
  {
    "input": "\"hello\"&5",
    "expected": []
  },
  {
    "input": "\"Prices: \" & Account.Order.Product.Price",
    "expected": []
  },
  {
    "input": "            (              $f := function($n){()};              $f(1)            ) ",
    "expected": []
  },
  {
    "input": "(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(99))             ",
    "expected": []
  },
  {
    "input": "(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(100))             ",
    "expected": []
  },
  {
    "input": "(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(5)) ",
    "expected": []
  },
  {
    "input": "(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(150)) ",
    "expected": []
  },
  {
    "input": "(  $inf := function($n){$n+$inf($n-1)};  $inf(5))",
    "expected": []
  },
  {
    "input": "(  $inf := function(){$inf()};  $inf())",
    "expected": []
  },
  {
    "input": "        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(6555)         )",
    "expected": []
  },
  {
    "input": "($f := function($s, $x)<an:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )",
    "expected": []
  },
  {
    "input": "($f := function($s, $x)<sn:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )",
    "expected": []
  },
  {
    "input": "$.'7a'",
    "expected": []
  },
  {
    "input": "$.'7'",
    "expected": []
  },
  {
    "input": "$.7a",
    "expected": []
  },
  {
    "input": "$.7",
    "expected": []
  },
  {
    "input": "{'Order': Account.Order.{  'ID': OrderID,  'Product': Product.{    'SKU': ProductID,    'Details': {      'Weight': Description.Weight,      'Dimensions': Description.(Width & ' x ' & Height & ' x ' & Depth)    }  },  'Total Price': $sum(Product.(Price * Quantity))}}",
    "expected": []
  },
  {
    "input": "\n        (\n          $tempReadings := $count(state.tempReadings) = 5 ?\n              [state.tempReadings[[1..4]], event.t] :\n              [state.tempReadings, event.t];\n        \n          {\n            \"tempReadings\": $tempReadings,\n            \"sumTemperatures\": $sum($tempReadings),\n            \"avgTemperature\": $average($tempReadings) ~> $round(2),\n            \"maxTemperature\": $max($tempReadings),\n            \"minTemperature\": $min($tempReadings)\n          }\n        )",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "foo",
    "expected": []
  },
  {
    "input": "baz",
    "expected": []
  },
  {
    "input": "Foo",
    "expected": []
  },
  {
    "input": "food",
    "expected": []
  },
  {
    "input": "maz.rar",
    "expected": []
  },
  {
    "input": "jee.par.waa",
    "expected": []
  },
  {
    "input": "foo",
    "expected": []
  },
  {
    "input": "foo.bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "bar",
    "expected": []
  },
  {
    "input": "$",
    "expected": []
  },
  {
    "input": "$lowercase(Salutation)",
    "expected": []
  },
  {
    "input": "$lowercase(敷)",
    "expected": []
  },
  {
    "input": "$lowercase(Español)",
    "expected": []
  },
  {
    "input": "$lowercase($.\"NI.Number\")",
    "expected": []
  },
  {
    "input": "$lowercase(\"COMPENSATION IS : \" & Employment.\"Executive.Compensation\")",
    "expected": []
  },
  {
    "input": "\"Hello\"",
    "expected": []
  },
  {
    "input": "$uppercase(Salutation)",
    "expected": []
  },
  {
    "input": "$uppercase(\"Hello World\")",
    "expected": []
  },
  {
    "input": "$uppercase(\"鯵噂ソ竹\")",
    "expected": []
  },
  {
    "input": "Employment.Name & \" is happy\"",
    "expected": []
  },
  {
    "input": "Employment.Name & \" is pleased to employ \" & Salutation & \" \" & Surname",
    "expected": []
  },
  {
    "input": "$uppercase(\"Hello \" & Salutation & \" \" & Surname)",
    "expected": []
  },
  {
    "input": "$uppercase(Salutation & \" \" & Surname & \" - has \" & Cars & \" registered cars\")",
    "expected": []
  },
  {
    "input": "$uppercase(Employment.ContractType)",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hola\", \"l\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hola\", 'l')",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hola\", \"Q\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Hola\", \"\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"鯵噂ソ竹\", \"ソ\")",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Coca\" & \"Cola\", \"ca\")",
    "expected": []
  },
  {
    "input": "$substringAfter(Salutation & \" \" & MiddleName &\" \" & Surname, MiddleName)",
    "expected": []
  },
  {
    "input": "$substringAfter(Salutation & \" \" & Employment.Role, Salutation)",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Hola\", 'l')",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Hola\", \"Q\")",
    "expected": []
  },
  {
    "input": "$lowercase(Employment.Role) & \" (\" & Employment.Role & \")\"",
    "expected": []
  },
  {
    "input": "Employment.Years & \" years of employment\"",
    "expected": []
  },
  {
    "input": "$uppercase(Salutation & \" \" & Surname & \" - has \" & Employment.Years & \" years of employment\")",
    "expected": []
  },
  {
    "input": "$substring(Employment.Role, 7,4)",
    "expected": []
  },
  {
    "input": "$substring(Employment.Role, -4,4)",
    "expected": []
  },
  {
    "input": "$substring(\"Hello World\",Cars,5)",
    "expected": []
  },
  {
    "input": "$lowercase(\"Missing close brackets\"",
    "expected": []
  },
  {
    "input": "$unknown(Salutation)",
    "expected": []
  },
  {
    "input": "$decrypt(Salutation)",
    "expected": []
  },
  {
    "input": "Employment.authentication(Salutation)",
    "expected": []
  },
  {
    "input": "$uppercase(Invalid)",
    "expected": []
  },
  {
    "input": "$uppercase(Employment.Invalid)",
    "expected": []
  },
  {
    "input": "$lowercase(\"Coca\", \"Cola\")",
    "expected": []
  },
  {
    "input": "$lowercase(Salary)",
    "expected": []
  },
  {
    "input": "$lowercase(20)",
    "expected": []
  },
  {
    "input": "$lowercase(20.55)",
    "expected": []
  },
  {
    "input": "$lowercase(Employment)",
    "expected": []
  },
  {
    "input": "$lowercase(Qualifications)",
    "expected": []
  },
  {
    "input": "$uppercase(\"Coca\", \"Cola\")",
    "expected": []
  },
  {
    "input": "$uppercase(Salary)",
    "expected": []
  },
  {
    "input": "$uppercase(28)",
    "expected": []
  },
  {
    "input": "$uppercase(20.55)",
    "expected": []
  },
  {
    "input": "$uppercase(Cars)",
    "expected": []
  },
  {
    "input": "$uppercase(Employment)",
    "expected": []
  },
  {
    "input": "$uppercase(Qualifications)",
    "expected": []
  },
  {
    "input": "$substringBefore(\"Coca\" & \"ca\")",
    "expected": []
  },
  {
    "input": "$substringBefore(Salary,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringBefore(22,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringBefore(22.55,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringBefore(\"22\",2)",
    "expected": []
  },
  {
    "input": "$substringBefore(\"22.55\",5)",
    "expected": []
  },
  {
    "input": "$substringBefore(Employment,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringBefore(Qualifications,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringAfter(\"Coca\" & \"ca\")",
    "expected": []
  },
  {
    "input": "$substringAfter(Salary,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringAfter(22,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringAfter(22.55,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringAfter(\"22\",2)",
    "expected": []
  },
  {
    "input": "$substringAfter(\"22.55\",5)",
    "expected": []
  },
  {
    "input": "$substringAfter(Employment,\"xx\")",
    "expected": []
  },
  {
    "input": "$substringAfter(Qualifications,\"xx\")",
    "expected": []
  },
  {
    "input": "$substring(\"Coca\" & \"ca\", 2, 4, 5)",
    "expected": []
  },
  {
    "input": "$substring(\"Coca\", \"Mr\", 4)",
    "expected": []
  },
  {
    "input": "$substring(\"Coca\", 3, \"Whoops\")",
    "expected": []
  },
  {
    "input": "$substring(Salary,2,4)",
    "expected": []
  },
  {
    "input": "$substring(\"Hello\",\"World\",5)",
    "expected": []
  },
  {
    "input": "$substring(\"Hello\",5,\"World\")",
    "expected": []
  },
  {
    "input": "$substring(\"Hello World\",5.5,5)",
    "expected": []
  },
  {
    "input": "$substring(Employment,\"xx\")",
    "expected": []
  },
  {
    "input": "$substring(Qualifications,6,5)",
    "expected": []
  },
  {
    "input": "detail.contents",
    "expected": []
  },
  {
    "input": "detail.meta",
    "expected": []
  },
  {
    "input": "detail.meta",
    "expected": []
  },
  {
    "input": "$ ~> |Account.Order.Product|{\"Total\":Price*Quantity},[\"Description\", \"SKU\"]|",
    "expected": []
  },
  {
    "input": "Account.Order ~> |Product|{\"Total\":Price*Quantity},[\"Description\", \"SKU\"]|",
    "expected": []
  },
  {
    "input": "$ ~> |Account.Order.Product|{\"Total\":Price*Quantity, \"Price\": Price * 1.2}|",
    "expected": []
  },
  {
    "input": "$ ~> |Account.Order.Product|{},\"Description\"|",
    "expected": []
  },
  {
    "input": "$ ~> |Account.Order.Product|nomatch,\"Description\"|",
    "expected": []
  },
  {
    "input": "$ ~> |(Account.Order.Product)[0]|{\"Description\":\"blah\"}|",
    "expected": []
  },
  {
    "input": "$ ~> |foo.bar|{\"Description\":\"blah\"}|",
    "expected": []
  },
  {
    "input": "Account ~> |Order|{\"Product\":\"blah\"},nomatch|",
    "expected": []
  },
  {
    "input": "foo ~> |foo.bar|{\"Description\":\"blah\"}|",
    "expected": []
  },
  {
    "input": "Account ~> |Order|5|",
    "expected": []
  },
  {
    "input": "Account ~> |Order|{},5|",
    "expected": []
  },
  {
    "input": "Account ~> |Order|{\"Product\":\"blah\"},nomatch|",
    "expected": []
  },
  {
    "input": "{} ~> |$|['one', 'two', 'three']|",
    "expected": []
  },
  {
    "input": "$ ~> | ** ['hi'] | {'hello': hi}, ['hi'] |",
    "expected": []
  },
  {
    "input": "$ ~> | ** [hi] | {'hello': hi}, ['hi'] |",
    "expected": []
  },
  {
    "input": "$price.foo.bar",
    "expected": []
  },
  {
    "input": "$price.foo.bar",
    "expected": []
  },
  {
    "input": "$var[1]",
    "expected": []
  },
  {
    "input": "$.foo.bar",
    "expected": []
  },
  {
    "input": "$a := 5",
    "expected": []
  },
  {
    "input": "$a := $b := 5",
    "expected": []
  },
  {
    "input": "($a := $b := 5; $a)",
    "expected": []
  },
  {
    "input": "($a := $b := 5; $b)",
    "expected": []
  },
  {
    "input": "( $a := 5; $a := $a + 2; $a )",
    "expected": []
  },
  {
    "input": "[1,2,3].$v",
    "expected": []
  },
  {
    "input": "( $foo := \"defined\"; ( $foo := nothing ); $foo )",
    "expected": []
  },
  {
    "input": "( $foo := \"defined\"; ( $foo := nothing; $foo ) )",
    "expected": []
  },
  {
    "input": "($a := [1,2]; $a[1]:=3; $a)",
    "expected": []
  },
  {
    "input": "foo.*",
    "expected": []
  },
  {
    "input": "foo.*.baz",
    "expected": []
  },
  {
    "input": "foo.*.bazz",
    "expected": []
  },
  {
    "input": "foo.*.baz.*",
    "expected": []
  },
  {
    "input": "foo.*.baz.*",
    "expected": []
  },
  {
    "input": "foo.*.baz.*",
    "expected": []
  },
  {
    "input": "*[type=\"home\"]",
    "expected": []
  },
  {
    "input": "Account[$$.Account.\"Account Name\" = \"Firefly\"].*[OrderID=\"order104\"].Product.Price",
    "expected": []
  },
  {
    "input": "Account[$$.Account.`Account Name` = \"Firefly\"].*[OrderID=\"order104\"].Product.Price",
    "expected": []
  },
  {
    "input": "*",
    "expected": []
  }
]
